(undo-tree-save-format-version . 1)
"7333967527b35667edbf742ddcde607d877e9ec2"
[nil nil nil nil (25139 20872 485379 356000) 0 nil]
([nil nil ((#("  " 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil)) . 989) (937 . 939) (#("    " 0 1 (ws-butler-chg chg fontified nil) 1 4 (ws-butler-chg chg fontified nil)) . 937) (883 . 885) (#("    " 0 1 (ws-butler-chg chg fontified nil) 1 4 (ws-butler-chg chg fontified nil)) . 883) (#("  " 0 1 (ws-butler-chg chg fontified nil c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg fontified nil c-in-sws t c-is-sws t)) . 831) (#("  " 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil)) . 783) (#("  " 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil)) . 780) (740 . 742) (#("    " 0 1 (ws-butler-chg chg fontified nil) 1 4 (ws-butler-chg chg fontified nil)) . 740) (677 . 679) (#("    " 0 1 (ws-butler-chg chg fontified nil) 1 4 (ws-butler-chg chg fontified nil)) . 677) (#("  " 0 1 (ws-butler-chg chg fontified nil c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg c-in-sws t fontified nil c-is-sws t)) . 625) (#("  " 0 2 (ws-butler-chg chg fontified nil)) . 577) (nil rear-nonsticky nil 1010 . 1011) (nil fontified nil 1010 . 1011) (nil fontified nil 1008 . 1010) (nil fontified nil 1007 . 1008) (nil fontified nil 1005 . 1007) (nil fontified nil 1003 . 1005) (nil fontified nil 971 . 1003) (nil fontified nil 965 . 971) (nil fontified nil 963 . 965) (nil fontified nil 957 . 963) (nil fontified nil 954 . 957) (nil fontified nil 953 . 954) (nil fontified nil 925 . 953) (nil fontified nil 920 . 925) (nil fontified nil 916 . 920) (nil fontified nil 907 . 916) (nil fontified nil 906 . 907) (nil fontified nil 905 . 906) (nil fontified nil 901 . 905) (nil fontified nil 898 . 901) (nil fontified nil 897 . 898) (nil fontified nil 894 . 897) (nil fontified nil 893 . 894) (nil fontified nil 888 . 893) (nil fontified nil 887 . 888) (nil fontified nil 881 . 887) (nil fontified nil 880 . 881) (nil fontified nil 877 . 880) (nil fontified nil 876 . 877) (nil fontified nil 875 . 876) (nil fontified nil 874 . 875) (nil fontified nil 873 . 874) (nil fontified nil 872 . 873) (nil fontified nil 871 . 872) (nil fontified nil 868 . 871) (nil fontified nil 867 . 868) (nil fontified nil 866 . 867) (nil fontified nil 865 . 866) (nil fontified nil 864 . 865) (nil fontified nil 859 . 864) (nil fontified nil 858 . 859) (nil fontified nil 857 . 858) (nil fontified nil 852 . 857) (nil fontified nil 851 . 852) (nil fontified nil 846 . 851) (nil fontified nil 845 . 846) (nil fontified nil 844 . 845) (nil fontified nil 843 . 844) (nil fontified nil 842 . 843) (nil fontified nil 839 . 842) (nil fontified nil 809 . 839) (nil fontified nil 799 . 809) (nil fontified nil 796 . 799) (nil fontified nil 795 . 796) (nil fontified nil 794 . 795) (nil fontified nil 793 . 794) (nil fontified nil 792 . 793) (nil fontified nil 789 . 792) (nil fontified nil 788 . 789) (nil fontified nil 756 . 788) (nil fontified nil 750 . 756) (nil fontified nil 747 . 750) (nil fontified nil 746 . 747) (nil fontified nil 724 . 746) (nil fontified nil 719 . 724) (nil fontified nil 709 . 719) (nil fontified nil 704 . 709) (nil fontified nil 700 . 704) (nil fontified nil 691 . 700) (nil fontified nil 690 . 691) (nil fontified nil 689 . 690) (nil fontified nil 685 . 689) (nil fontified nil 682 . 685) (nil fontified nil 681 . 682) (nil fontified nil 678 . 681) (nil fontified nil 677 . 678) (nil fontified nil 672 . 677) (nil fontified nil 671 . 672) (nil fontified nil 665 . 671) (nil fontified nil 664 . 665) (nil fontified nil 661 . 664) (nil fontified nil 660 . 661) (nil fontified nil 659 . 660) (nil fontified nil 658 . 659) (nil fontified nil 657 . 658) (nil fontified nil 656 . 657) (nil fontified nil 655 . 656) (nil fontified nil 652 . 655) (nil fontified nil 651 . 652) (nil fontified nil 650 . 651) (nil fontified nil 648 . 650) (nil fontified nil 643 . 648) (nil fontified nil 642 . 643) (nil fontified nil 641 . 642) (nil fontified nil 636 . 641) (nil fontified nil 635 . 636) (nil fontified nil 630 . 635) (nil fontified nil 629 . 630) (nil fontified nil 628 . 629) (nil fontified nil 627 . 628) (nil fontified nil 626 . 627) (nil fontified nil 623 . 626) (nil fontified nil 583 . 623) (nil fontified nil 580 . 583) (nil fontified nil 579 . 580) (nil fontified nil 577 . 579) (577 . 1011) (t 25138 17899 733631 760000)) nil (25139 20872 485359 856000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t c-is-sws t c-in-sws t)) . 831) (#("e" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 831) (#("n" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 831) (#("i" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 831) (#("l" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 831) (#("n" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 831) (#("i" 0 1 (ws-butler-chg delete fontified t c-is-sws t face font-lock-keyword-face)) . 831)) nil (25139 20872 485313 956000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg delete fontified t c-is-sws t c-in-sws t)) . 625) (#("e" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 625) (#("n" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 625) (#("i" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 625) (#("l" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 625) (#("n" 0 1 (ws-butler-chg delete fontified t c-is-sws t)) . 625) (#("i" 0 1 (ws-butler-chg delete c-is-sws t fontified t face font-lock-keyword-face)) . 625)) nil (25139 20872 485298 56000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 775)) nil (25139 20872 485283 256000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face font-lock-function-name-face)) . 400)) nil (25139 20872 485269 756000) 0 nil])
([nil nil ((400 . 401)) nil (25139 20872 485253 656000) 0 nil])
([nil nil ((406 . 10580) (#("
{
  // Configure motor gemotery and characteristics
  microsteps_per_turn = microsteps * steps_per_turn;
  distance_per_step = rotation_distance / microsteps_per_turn;
}
/** Convert steps quantity to the real units */
unit_t Motor::steps_to_units(unit_t steps) {
  float rotations = (float)steps / (float)microsteps_per_turn;
  return rotations * rotation_distance;
}
/** Convert steps quantity to the real units */
step_t Motor::units_to_steps(unit_t units) {
  float rotations = (float)units / rotation_distance;
  return (step_t)(rotations * microsteps_per_turn);
}

/** ******************************************/
/** The GPIO driver of the StepMotor         */
/** ******************************************/

StepMotorHAL::StepMotorHAL() {}

void StepMotorHAL::Init(int id, StepMotorConfig *config)
{
  m_id(id);
  m_config(config);

  ESP_LOGI(TAG, \"[%d] Initialize step motor\", id);

  make_oc_gpio(m_config->step_pin);
  make_oc_gpio(m_config->dir_pin);
  make_oc_gpio(m_config->enable_pin);
  make_in_gpio(m_config->endstop_pin);
}
bool StepMotorHAL::GetEnable()
{
  if (m_config->enable_pin != GPIO_NULL)
    return (bool)gpio_get_level(m_config->enable_pin) ^^ m_config->enable_pin_reverse;
   return false;
}
void StepMotorHAL::SetEnable(bool v)
{
  if (m_config->enable_pin != GPIO_NULL)
    set_pin(m_config->enable_pin, v ^^ m_config->enable_pin_reverse);
}
bool StepMotorHAL::GetDirection()
{
  if (m_config->direction_pin != GPIO_NULL)
    return (bool)gpio_get_level(m_config->direction_pin) ^^ m_config->direction_pin_reverse;
   return false;
}
void StepMotorHAL::SetDirecton(bool v)
{
  if (m_config->dir_pin != GPIO_NULL)
    set_pin(m_config->dir_pin, v ^^ m_config->dir_pin_reverse);
}
void StepMotorHAL::SetStep(bool v)
{
  if (m_config->step_pin != GPIO_NULL)
    set_pin(m_config->step_pin, v ^^ m_config->step_pin_reverse);
}
bool StepMotorHAL::GetEndpoint() {
  if (m_config->endstop_pin != GPIO_NULL)
    return (bool)gpio_get_level(m_config->endstop_pin) ^^ m_config->endstop_pin_reverse;
  return false;
}

/** ******************************************/
/** Moving to target agent                   */
/** ******************************************/

StepMotorAgent::StepMotorAgent()
  : m_id(0)
  , m_motor()
  , m_moving(false)
  , m_target(0)
  , m_velocity(0)
{}

void StepMotorAgent::Init(StepMotor* motor)
{
  m_motor = motor;
  m_id = motor->m_id;
  m_config = motor->m_config;
}

void StepMotorAgent::MoveTo(stepo_t pos, unit_t velocity)
{
  m_target = pos;
  m_velocity = velocity;
  OnStep();
}

void StepMotorAgent::OnStep()
{
  if (m_motor == nullptr)
    return;
  if (m_moving) {
    if (target < m_motor->position) {
      m_motor->SetVelocity(m_velocity);
    } else if (position_steps > target_position_steps) {
      m_motor->SetVelocity(-m_velocity);
    } else {
      m_moving = false;
      ESP_LOGI(TAG, \"[%d] Moving complete\", m_motor->m_id);
    }
  }
}

void StepMotorAgent::Stop()
{
  if (m_motor == nullptr)
    return;
  if (m_moving) {
    m_moving = false;
    m_motor->SetVelocity(0);
  }
}


/** ******************************************/
/** The motor                                */
/** ******************************************/

static void timer_isr(void *arg);

Motor::Motor()
{

}

/** Initialize the motor */
void Motor::Init(StepMotorConfig* config)
{
  ESP_LOGI(TAG, \"[%d] Initialize motor\", id);

  m_config = config;
  m_hal.Iinit(config);
  m_agent->Init(this);

  // Reset the motor's status
  m_target_velocity = 0;
  m_velocity = 0;
  m_position = 0;

  // Configure timer
  m_timer_arg.callback = &timer_isr;
  m_timer_arg.arg = this;
  ESP_ERROR_CHECK(esp_timer_create(&m_timer_arg, &m_timer_handle));
  /* Start the timers */
  timer_interval_us = TIMER_IDLE_DELAY_US;
  ESP_ERROR_CHECK(esp_timer_start_periodic(m_timer_handle, m_timer_interval_us));
}

/** Initialize menu system */
void Motor::InitMenu(Menu* parent, std::string name)
{
  auto menu = new Menu(parent, name);
  parent_menu->Add(menu);
  menu->Add(parent_menu);
  menu->Add(new FloatItem(\"vel.\", []() { return GetTargetVelocity(); }, [](float v){ SetTargetVelocity(v); }));
  auto pos_01 = new FloatItem(\"Pos+-1\", []() { return GetTargetPosition(); }, [](float v){ SetTargetPosition(v); });
  auto pos_10 = new FloatItem(\"Pos+-10\", []() { return GetTargetPosition(); }, [](float v){ SetTargetPosition(v); });
  pos_01.Step(1);
  pos_10.Step(10);
  menu->Add(pos_01);
  menu->Add(pos_10);
}


/** Update the motor even 20ms */
void Motor::Update(float time) {
  UpdateVelocity(time);
  // required for computing DT inside the other methods
  m_previous_update_at = time;
}

// ==================================================
// Utilities
// ==================================================

float StepMotor::GetDeltaTime(float time)
{
  return time - m_previous_update_at;
}
void StepMotor::SetVelocity(unit_t vel)
{
  m_target_velocity = vel;
}
void StepMotor::SetEnable(bool v)
{
  m_hal->SetEnable(v);
}

// ==================================================
// Convert units
// ==================================================

/** Return true if sucesfully convert velocity to timer inteval */
bool StepMotor::VerifyTimerInterval(uint64_t& interval)
{
  if (interval == 0) {
    interval = TIMER_IDLE_DELAY_US;
    ESP_LOGE(TAG, \"[id] The timer interval is zero\", id);
    return false;
  } else if (interval > MAXIMUM_TIMER_INTERVAL_US) {
    interval = MAXIMUM_TIMER_INTERVAL_US;
    ESP_LOGE(TAG, \"[id] The timer interval is too big\", id);
    return false;
  } else if (interval < MINIMUM_TIMER_INTERVAL_US) {
    interval = MINIMUM_TIMER_INTERVAL_US;
    ESP_LOGE(TAG, \"[id] The timer interval is too small\", id);
    return false;
  }
  return true;
}

/** make current velocity ecual to desired velocity */
void StepMotor::UpdateVelocity(float time)
{
  float dt = GetDeltaTime(time);
  float old_velocity = m_velocity;
  // compute direction
  auto veldif = m_target_velocity - m_velocity;
  auto accdir = get_direction(veldif);
  // compute acceleration
  auto accel = max_accel * dt;
  if (fabs(veldif) < accel) {
    m_velocity = m_target_velocity;
  } else {
    // apply acceleration to velocity
    m_velocity += accel * accdir;
    // limit velocity
    if (accdir > 0) {
      if (m_velocity > m_config->max_velocity)
        m_velocity = m_config->max_velocity;
    } else if (accdir < 0) {
      if (m_velocity < -m_config->max_velocity)
        m_velocity = -m_config->max_velocity;
    }
  }
  // Restart the timer
  if (m_velocity != old_velocity) {
    auto steps_per_sec = UnitsToSteps(m_velocity);
    m_timer_interval_us = (uint64_t)((double)1.0 / steps_per_sec * 1000000);
    VelocityToTimerInterval(velocity, m_timer_interval_us);
    if (m_log > 2)
      printf(\"[%d] tgt-vel: %f vel: %lld\\n\", m_id, m_target_velocity,  m_velocity, m_timer_interval_us);
    // Restart the timer
    esp_timer_stop(m_timer_handle);
    esp_timer_start_once(m_timer_handle, m_timer_interval_us);
  }
}

bool IsMovingHome() {
  return get_direction(m_target_velocity) == get_direction(m_config->homing_dir);
}

void StepMotor::SetVelocity(unit_t vel)
{
  m_target_velocity = vel;
  if (vel == 0)
    m_curent_velocity = 0;
}

// ==================================================
// Timer ISR
// ==================================================

void Motor::Isr() {
  // Just for debugging update the value
  isr_count++;
  esp_timer_stop(timer_handle);
  esp_timer_start_once(timer_handle, timer_interval_us);

  if (m_velocity != 0) {
    // Set direction and make idle if the pin was changed
    bool ndir = m_velocity > 0;
    bool odir  m_hal->SetDirection(dir);
    m_hal->SetDirection(ndir);
    if (dir != odir)
      ets_delay_us(MOTOR_DIR_PULSE_DELAY_MS);
    m_hal->SetStep(true);
    ets_delay_us(MOTOR_STEP_PULSE_WIDTH_MS);
    m_hal->SetStep(false);
    // compure the position in units
    position_steps += get_direction(m_velocity);
    m_agent->OnStep();
    if (m_hal->GetEndpoint())
      m_agent->Stop();

  }
}

/** The @arg points to motor_t structure */
static void  timer_isr(void *arg)
{
  ((Motor*)arg)->Isr();
}

// ==================================================
// Moving to the target point
// ==================================================

/** Move motor to position with this velocity */
void StepMotor::MoveTo(step_t position, unit_t velocity){
  m_agent->MoveTo(position, velocity);
}

/** Move motor to position */
void StepMotor::MoveTo(unit_t position, unit_t velocity) {
  m_agent->MoveTo(m_config->UnitsToSteps(position), velocity);
}

// ==================================================
// The homing process
// ==================================================


#define HOMING_TASK_PRIO 2

void StepMotor::HomingTask()
{
  ESP_LOGI(TAG, \"Start Homing...\");
  auto retract_steps = UnitsToSteps(homing_retract_dist);
  // prehoming
  ESP_LOGI(TAG, \"Homing [Prehoming]\");
  auto target = position_steps - retract_steps * homing_dir;
  MoveToStep(target, homing_speed);
  ets_delay_us(1000);
  while (state==State::MoveToTarget)
    ets_delay_us(1000);
  // homing 1
  ESP_LOGI(TAG, \"Homing [Homing 1]\");
  target = position_steps + retract_steps * homing_dir;
  MoveToStep(target, homing_speed);
  ets_delay_us(1000);
  while (!endstop_state)
    ets_delay_us(1000);
  // retract
  ESP_LOGI(TAG, \"Homing [Retract]\");
  target = position_steps - retract_steps * homing_dir;
  MoveToStep(target, homing_retract_dist);
  ets_delay_us(1000);
  while (state==State::MoveToTarget)
    ets_delay_us(1000);
  // homing 2
  ESP_LOGI(TAG, \"Homing [Homing 2]\");
  target = position_steps + retract_steps * homing_dir;
  MoveToStep(target, second_homing_speed);
  ets_delay_us(1000);
  while (!endstop_state)
    ets_delay_us(1000);
  // done
  ESP_LOGI(TAG, \"Homing [Done]\");
  position_steps = position_endstop;
  vTaskDelete(NULL);
}

void homing_task(void *arg) {
  ((Motor*)arg)->HomingTask();
}

void StepMotor::MoveToHome() {
  state = State::Enabled;
  target_velocity_sig = 0;
  ESP_LOGI(TAG, \"Start homing task\");
  if (homing_task_handle!=NULL)
    vTaskDelete(homing_task_handle);" 0 3 (fontified t) 3 5 (c-in-sws t c-is-sws t fontified t) 5 6 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 6 8 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 8 52 (c-in-sws t fontified t face font-lock-comment-face) 52 53 (c-in-sws t fontified t face font-lock-comment-face) 53 55 (c-is-sws t c-in-sws t fontified t) 55 56 (c-is-sws t fontified t) 56 95 (fontified t) 95 105 (fontified t) 105 169 (fontified t) 169 170 (fontified t) 170 171 (fontified t) 171 172 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t face font-lock-doc-face) 172 175 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 175 215 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 215 217 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 217 218 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 218 219 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 219 220 (ws-butler-chg delete c-is-sws t fontified t face font-lock-type-face) 220 224 (ws-butler-chg chg fontified t face font-lock-type-face) 224 225 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 225 226 (ws-butler-chg chg fontified t) 226 231 (ws-butler-chg chg fontified t face font-lock-constant-face) 231 233 (ws-butler-chg chg fontified t) 233 234 (ws-butler-chg chg fontified t face font-lock-function-name-face) 234 235 (ws-butler-chg chg fontified t face font-lock-function-name-face) 235 238 (ws-butler-chg chg fontified t face font-lock-function-name-face) 238 239 (ws-butler-chg chg fontified t face font-lock-function-name-face) 239 240 (ws-butler-chg chg fontified t face font-lock-function-name-face) 240 241 (ws-butler-chg chg fontified t face font-lock-function-name-face) 241 242 (ws-butler-chg chg fontified t face font-lock-function-name-face) 242 243 (ws-butler-chg chg fontified t face font-lock-function-name-face) 243 244 (ws-butler-chg chg fontified t face font-lock-function-name-face) 244 247 (ws-butler-chg chg fontified t face font-lock-function-name-face) 247 248 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 248 254 (ws-butler-chg chg fontified t face font-lock-type-face) 254 255 (ws-butler-chg chg fontified t) 255 260 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 260 261 (ws-butler-chg chg fontified t) 261 264 (ws-butler-chg chg fontified t) 264 266 (ws-butler-chg chg fontified t) 266 267 (ws-butler-chg delete fontified t face font-lock-type-face) 267 270 (ws-butler-chg chg fontified t face font-lock-type-face) 270 271 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 271 272 (ws-butler-chg chg fontified t) 272 281 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 281 285 (ws-butler-chg chg fontified t) 285 290 (ws-butler-chg chg fontified t face font-lock-type-face) 290 300 (ws-butler-chg chg fontified t) 300 305 (ws-butler-chg chg fontified t face font-lock-type-face) 305 329 (ws-butler-chg chg fontified t) 329 330 (ws-butler-chg delete fontified t face font-lock-keyword-face) 330 335 (ws-butler-chg chg fontified t face font-lock-keyword-face) 335 367 (ws-butler-chg chg fontified t) 367 368 (ws-butler-chg delete fontified t) 368 369 (ws-butler-chg chg fontified t) 369 370 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t face font-lock-doc-face) 370 373 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 373 383 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 383 413 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 413 415 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 415 416 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 416 417 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 417 418 (ws-butler-chg delete c-is-sws t fontified t face font-lock-type-face) 418 422 (ws-butler-chg chg fontified t face font-lock-type-face) 422 423 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 423 424 (ws-butler-chg chg fontified t) 424 429 (ws-butler-chg chg fontified t face font-lock-constant-face) 429 430 (ws-butler-chg chg fontified t) 430 431 (ws-butler-chg chg fontified t) 431 432 (ws-butler-chg chg fontified t face font-lock-function-name-face) 432 433 (ws-butler-chg chg fontified t face font-lock-function-name-face) 433 436 (ws-butler-chg chg fontified t face font-lock-function-name-face) 436 437 (ws-butler-chg chg fontified t face font-lock-function-name-face) 437 438 (ws-butler-chg chg fontified t face font-lock-function-name-face) 438 439 (ws-butler-chg chg fontified t face font-lock-function-name-face) 439 440 (ws-butler-chg chg fontified t face font-lock-function-name-face) 440 441 (ws-butler-chg chg fontified t face font-lock-function-name-face) 441 442 (ws-butler-chg chg fontified t face font-lock-function-name-face) 442 445 (ws-butler-chg chg fontified t face font-lock-function-name-face) 445 446 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 446 452 (ws-butler-chg chg fontified t face font-lock-type-face) 452 453 (ws-butler-chg chg fontified t) 453 458 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 458 459 (ws-butler-chg chg fontified t) 459 462 (ws-butler-chg chg fontified t) 462 464 (ws-butler-chg chg fontified t) 464 465 (ws-butler-chg delete fontified t face font-lock-type-face) 465 468 (ws-butler-chg chg fontified t face font-lock-type-face) 468 469 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 469 470 (ws-butler-chg chg fontified t) 470 479 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 479 483 (ws-butler-chg chg fontified t) 483 488 (ws-butler-chg chg fontified t face font-lock-type-face) 488 500 (ws-butler-chg chg fontified t) 500 515 (ws-butler-chg chg fontified t) 515 518 (ws-butler-chg chg fontified t) 518 519 (ws-butler-chg delete fontified t face font-lock-keyword-face) 519 524 (ws-butler-chg chg fontified t face font-lock-keyword-face) 524 526 (ws-butler-chg chg fontified t) 526 532 (ws-butler-chg chg fontified t face font-lock-type-face) 532 564 (ws-butler-chg chg fontified t) 564 566 (ws-butler-chg chg fontified t) 566 568 (ws-butler-chg chg fontified t) 568 569 (ws-butler-chg delete fontified t c-type c-decl-id-start) 569 570 (ws-butler-chg chg rear-nonsticky t fontified t) 570 571 (fontified t) 571 572 (c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 572 575 (c-in-sws t fontified t face font-lock-doc-face) 575 616 (c-in-sws t fontified t face font-lock-doc-face) 616 617 (c-in-sws t fontified t face font-lock-doc-face) 617 618 (c-in-sws t fontified t face font-lock-doc-face) 618 619 (c-is-sws t c-in-sws t fontified t) 619 620 (c-is-sws t c-in-sws t fontified t face font-lock-doc-face) 620 623 (c-in-sws t fontified t face font-lock-doc-face) 623 655 (c-in-sws t fontified t face font-lock-doc-face) 655 666 (c-in-sws t fontified t face font-lock-doc-face) 666 667 (c-in-sws t fontified t) 667 671 (c-in-sws t fontified t face font-lock-doc-face) 671 712 (c-in-sws t fontified t face font-lock-doc-face) 712 714 (c-in-sws t fontified t face font-lock-doc-face) 714 716 (c-in-sws t fontified t) 716 717 (c-is-sws t fontified t face font-lock-constant-face) 717 728 (fontified t face font-lock-constant-face) 728 730 (fontified t) 730 742 (fontified t face font-lock-function-name-face) 742 749 (fontified t) 749 752 (fontified t face font-lock-type-face) 752 753 (fontified t c-type c-decl-id-start face font-lock-type-face) 753 754 (fontified t) 754 764 (fontified t face font-lock-constant-face) 764 766 (fontified t face font-lock-constant-face) 766 768 (fontified t) 768 772 (fontified t face font-lock-function-name-face) 772 773 (fontified t c-type c-decl-arg-start) 773 776 (fontified t face font-lock-type-face) 776 777 (fontified t) 777 779 (fontified t face font-lock-variable-name-face) 779 780 (fontified t c-type c-decl-arg-start) 780 781 (fontified t) 781 796 (fontified t face font-lock-type-face) 796 798 (fontified t) 798 804 (fontified t face font-lock-variable-name-face) 804 805 (fontified t) 805 857 (fontified t) 857 885 (fontified t face font-lock-string-face) 885 1004 (fontified t) 1004 1015 (fontified t) 1015 1040 (fontified t) 1040 1041 (fontified t) 1041 1043 (fontified t) 1043 1046 (fontified t face font-lock-type-face) 1046 1047 (fontified t c-type c-decl-id-start face font-lock-type-face) 1047 1048 (fontified t) 1048 1060 (fontified t face font-lock-constant-face) 1060 1062 (fontified t) 1062 1071 (fontified t face font-lock-function-name-face) 1071 1073 (fontified t) 1073 1078 (fontified t) 1078 1080 (fontified t face font-lock-keyword-face) 1080 1121 (fontified t) 1121 1127 (fontified t face font-lock-keyword-face) 1127 1129 (fontified t) 1129 1133 (fontified t face font-lock-type-face) 1133 1207 (fontified t) 1207 1213 (fontified t face font-lock-keyword-face) 1213 1214 (fontified t) 1214 1219 (fontified t face font-lock-constant-face) 1219 1223 (fontified t) 1223 1226 (fontified t face font-lock-type-face) 1226 1227 (fontified t c-type c-decl-id-start face font-lock-type-face) 1227 1228 (fontified t) 1228 1240 (fontified t face font-lock-constant-face) 1240 1242 (fontified t) 1242 1251 (fontified t face font-lock-function-name-face) 1251 1252 (fontified t c-type c-decl-arg-start) 1252 1256 (fontified t face font-lock-type-face) 1256 1257 (fontified t) 1257 1258 (fontified t face font-lock-variable-name-face) 1258 1264 (fontified t) 1264 1266 (fontified t face font-lock-keyword-face) 1266 1305 (fontified t) 1305 1373 (fontified t) 1373 1375 (fontified t) 1375 1378 (fontified t face font-lock-type-face) 1378 1379 (fontified t c-type c-decl-id-start face font-lock-type-face) 1379 1380 (fontified t) 1380 1392 (fontified t face font-lock-constant-face) 1392 1394 (fontified t) 1394 1406 (fontified t face font-lock-function-name-face) 1406 1413 (fontified t) 1413 1415 (fontified t face font-lock-keyword-face) 1415 1459 (fontified t) 1459 1465 (fontified t face font-lock-keyword-face) 1465 1467 (fontified t) 1467 1471 (fontified t face font-lock-type-face) 1471 1540 (fontified t) 1540 1541 (fontified t) 1541 1547 (fontified t) 1551 1557 (face font-lock-keyword-face) 1558 1563 (face font-lock-constant-face) 1567 1570 (face font-lock-type-face) 1570 1571 (c-type c-decl-id-start face font-lock-type-face) 1572 1573 (face font-lock-constant-face) 1573 1584 (face font-lock-constant-face) 1586 1597 (face font-lock-function-name-face) 1597 1598 (c-type c-decl-arg-start) 1598 1602 (face font-lock-type-face) 1603 1604 (face font-lock-variable-name-face)) . 406) (undo-tree-id0 . -716) (undo-tree-id1 . -747) (undo-tree-id2 . -749) (undo-tree-id3 . -1042) (undo-tree-id4 . -773) (undo-tree-id5 . -780) (undo-tree-id6 . -781) (undo-tree-id7 . -805) (undo-tree-id8 . -1043) (undo-tree-id9 . -1222) (undo-tree-id10 . -1223) (undo-tree-id11 . -1374) (undo-tree-id12 . -1252) (undo-tree-id13 . -1259) (undo-tree-id14 . -1375) (undo-tree-id15 . -1566) (undo-tree-id16 . -1567) (undo-tree-id17 . -1711) (undo-tree-id18 . -1598) (undo-tree-id19 . -1605) (undo-tree-id20 . -1712) (undo-tree-id21 . -1855) (undo-tree-id22 . -1739) (undo-tree-id23 . -1746) (undo-tree-id24 . -1856) (undo-tree-id25 . -2039) (undo-tree-id26 . -2186) (undo-tree-id27 . -2301) (undo-tree-id28 . -2303) (undo-tree-id29 . -2421) (undo-tree-id30 . -2329) (undo-tree-id31 . -2346) (undo-tree-id32 . -2423) (undo-tree-id33 . -2539) (undo-tree-id34 . -2451) (undo-tree-id35 . -2463) (undo-tree-id36 . -2464) (undo-tree-id37 . -2480) (undo-tree-id38 . -2541) (undo-tree-id39 . -2913) (undo-tree-id40 . -2915) (undo-tree-id41 . -3057) (undo-tree-id42 . -3205) (undo-tree-id43 . -3238) (undo-tree-id44 . -3227) (undo-tree-id45 . -3237) (undo-tree-id46 . -3240) (undo-tree-id47 . -3259) (undo-tree-id48 . -3289) (undo-tree-id49 . -3843) (undo-tree-id50 . -3306) (undo-tree-id51 . -3330) (undo-tree-id52 . -3875) (undo-tree-id53 . -4447) (undo-tree-id54 . -3896) (undo-tree-id55 . -3909) (undo-tree-id56 . -3910) (undo-tree-id57 . -3927) (undo-tree-id58 . -4484) (undo-tree-id59 . -4629) (undo-tree-id60 . -4503) (undo-tree-id61 . -4514) (undo-tree-id62 . -4753) (undo-tree-id63 . -4836) (undo-tree-id64 . -4783) (undo-tree-id65 . -4794) (undo-tree-id66 . -4837) (undo-tree-id67 . -4907) (undo-tree-id68 . -4865) (undo-tree-id69 . -4876) (undo-tree-id70 . -4908) (undo-tree-id71 . -4968) (undo-tree-id72 . -4934) (undo-tree-id73 . -4941) (undo-tree-id74 . -5163) (undo-tree-id75 . -5726) (undo-tree-id76 . -5199) (undo-tree-id77 . -5218) (undo-tree-id78 . -5783) (undo-tree-id79 . -6981) (undo-tree-id80 . -5814) (undo-tree-id81 . -5825) (undo-tree-id82 . -6983) (undo-tree-id83 . -7088) (undo-tree-id84 . -7090) (undo-tree-id85 . -7203) (undo-tree-id86 . -7118) (undo-tree-id87 . -7129) (undo-tree-id88 . -7327) (undo-tree-id89 . -8013) (undo-tree-id90 . -8059) (undo-tree-id91 . -8120) (undo-tree-id92 . -8082) (undo-tree-id93 . -8092) (undo-tree-id94 . -8310) (undo-tree-id95 . -8408) (undo-tree-id96 . -8333) (undo-tree-id97 . -8349) (undo-tree-id98 . -8350) (undo-tree-id99 . -8366) (undo-tree-id100 . -8440) (undo-tree-id101 . -8563) (undo-tree-id102 . -8463) (undo-tree-id103 . -8479) (undo-tree-id104 . -8480) (undo-tree-id105 . -8496) (undo-tree-id106 . -8705) (undo-tree-id107 . -8721) (undo-tree-id108 . -8725) (undo-tree-id109 . -9856) (undo-tree-id110 . -9858) (undo-tree-id111 . -9920) (undo-tree-id112 . -9875) (undo-tree-id113 . -9885) (undo-tree-id114 . -9922) (undo-tree-id115 . -171) (undo-tree-id116 . -171) (undo-tree-id117 . -170) (undo-tree-id118 . -219) (undo-tree-id119 . -368) (undo-tree-id120 . -248) (undo-tree-id121 . -261) (undo-tree-id122 . -417) (undo-tree-id123 . -569) (undo-tree-id124 . -446) (undo-tree-id125 . -459) (undo-tree-id126 . -462) (undo-tree-id127 . -515) (undo-tree-id128 . -1002) (undo-tree-id129 . -1040) (t 25139 20872 486235 595000)) nil (25139 20878 993385 543000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . 1174) (t 25139 20878 996235 348000)) nil (25139 20966 526975 813000) 0 nil])
([nil nil ((1174 . 1175)) nil (25139 20966 526963 113000) 0 nil])
([nil nil ((#("make_oc_gpio" 0 12 (ws-butler-chg chg fontified t)) . -1368) (1380 . 1391) (#("make_oc_gpio" 0 12 (ws-butler-chg chg fontified t)) . -1334) (1346 . 1357) (#("make_oc_gpio" 0 12 (ws-butler-chg chg fontified t)) . -1299) (1311 . 1322) 1246) nil (25139 20966 526949 513000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg chg fontified t)) . -1410) (undo-tree-id135 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t)) . -1411) (undo-tree-id136 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -1412) (undo-tree-id137 . -1) 1413) nil (25139 20966 526933 713000) 0 nil])
([nil nil ((#("m" 0 1 (ws-butler-chg chg fontified t)) . -1405) (undo-tree-id130 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -1406) (undo-tree-id131 . -1) (#("k" 0 1 (ws-butler-chg chg fontified t)) . -1407) (undo-tree-id132 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -1408) (undo-tree-id133 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -1409) (undo-tree-id134 . -1) 1410) nil (25139 20966 526912 313000) 0 nil])
([nil nil ((1405 . 1409)) nil (25139 20966 526878 513000) 0 nil])
([nil nil ((1413 . 1416)) nil (25139 20966 526826 13000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1462) (t 25139 20966 529565 356000)) nil (25139 20973 573617 480000) 0 nil])
([nil nil ((1462 . 1463)) nil (25139 20973 573603 980000) 0 nil])
([nil nil ((1465 . 1466)) nil (25139 20973 573590 880000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1466)) nil (25139 20973 573577 80000) 0 nil])
([nil nil ((1466 . 1467)) nil (25139 20973 573560 680000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1643) (t 25139 20973 576231 754000)) nil (25139 21012 153104 722000) 0 nil])
([nil nil ((1643 . 1644)) nil (25139 21012 153091 822000) 0 nil])
([nil nil ((1646 . 1647)) nil (25139 21012 153078 822000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1647)) nil (25139 21012 153066 22000) 0 nil])
([nil nil ((1647 . 1648)) nil (25139 21012 153053 422000) 0 nil])
([nil nil ((#("D" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1799) (undo-tree-id141 . -1) 1800) nil (25139 21012 153040 422000) 0 nil])
([nil nil ((1799 . 1801)) nil (25139 21012 153024 522000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1796) (undo-tree-id140 . -1) 1797) nil (25139 21012 153011 422000) 0 nil])
([nil nil ((1796 . 1797)) nil (25139 21012 152989 22000) 0 nil])
([nil nil ((1990 . 1991)) nil (25139 21012 152976 122000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified nil face font-lock-function-name-face)) . -1990) 1991) nil (25139 21012 152963 22000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1989)) nil (25139 21012 152949 922000) 0 nil])
([nil nil ((1989 . 1990)) nil (25139 21012 152937 422000) 0 nil])
([nil nil ((1992 . 1994)) nil (25139 21012 152924 822000) 0 nil])
([nil nil ((#("D" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1994)) nil (25139 21012 152912 22000) 0 nil])
([nil nil ((2138 . 2140)) nil (25139 21012 152899 122000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2140)) nil (25139 21012 152886 222000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -2135) (undo-tree-id139 . -1) 2136) nil (25139 21012 152873 22000) 0 nil])
([nil nil ((2135 . 2136)) nil (25139 21012 152857 222000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -2280) (undo-tree-id138 . -1) 2281) nil (25139 21012 152844 122000) 0 nil])
([nil nil ((2280 . 2281)) nil (25139 21012 152817 222000) 0 nil])
([nil nil ((2283 . 2284)) nil (25139 21012 152804 622000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2284)) nil (25139 21012 152791 422000) 0 nil])
([nil nil ((2284 . 2285)) nil (25139 21012 152774 322000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -2427) (undo-tree-id142 . -1) 2428 (t 25139 21012 156230 282000)) nil (25139 21017 701104 463000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -1604) (undo-tree-id159 . -1) 1605 (t 25139 21017 706230 71000)) nil (25139 21031 112967 298000) 0 nil])
([nil nil ((1605 . 2428) (#("  return false;
}
void StepMotorHAL::set_enable(bool v) {
  if (m_config->enable_pin != GPIO_NULL)
    set_pin(m_config->enable_pin, v ^^ m_config->enable_pin_reverse);
}
bool StepMotorHAL::get_direction() {
  if (m_config->direction_pin != GPIO_NULL)
    return (bool)gpio_get_level(m_config->direction_pin) ^^ m_config->direction_pin_reverse;

  return false;
}
void StepMotorHAL::set_directon(bool v) {
  if (m_config->dir_pin != GPIO_NULL)
    set_pin(m_config->dir_pin, v ^^ m_config->dir_pin_reverse);
}
void StepMotorHAL::set_step(bool v) {
  if (m_config->step_pin != GPIO_NULL)
    set_pin(m_config->step_pin, v ^^ m_config->step_pin_reverse);
}
bool StepMotorHAL::get_endpoint() {
  if (m_config->endstop_pin != GPIO_NULL)
    return (bool)gpio_get_level(m_config->endstop_pin) ^^ m_config->endstop_pin_reverse;" 0 2 (ws-butler-chg chg fontified t) 2 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t) 9 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 18 (ws-butler-chg chg fontified t) 18 21 (ws-butler-chg chg fontified t face font-lock-type-face) 21 22 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 22 23 (ws-butler-chg chg fontified t) 23 35 (ws-butler-chg chg fontified t face font-lock-constant-face) 35 37 (ws-butler-chg chg fontified t) 37 38 (ws-butler-chg chg fontified t face font-lock-function-name-face) 38 39 (ws-butler-chg delete fontified t face font-lock-function-name-face) 39 40 (ws-butler-chg chg fontified t face font-lock-function-name-face) 40 41 (ws-butler-chg chg fontified t face font-lock-function-name-face) 41 42 (ws-butler-chg chg fontified t face font-lock-function-name-face) 42 43 (ws-butler-chg delete fontified t face font-lock-function-name-face) 43 47 (ws-butler-chg chg fontified t face font-lock-function-name-face) 47 48 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 48 52 (ws-butler-chg chg fontified t face font-lock-type-face) 52 53 (ws-butler-chg chg fontified t) 53 54 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 54 55 (ws-butler-chg chg fontified t) 55 60 (ws-butler-chg chg fontified t) 60 62 (ws-butler-chg chg fontified t face font-lock-keyword-face) 62 103 (ws-butler-chg chg fontified t) 103 169 (ws-butler-chg chg fontified t) 169 171 (ws-butler-chg chg fontified t) 171 174 (ws-butler-chg chg fontified t face font-lock-type-face) 174 175 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 175 176 (ws-butler-chg chg fontified t) 176 188 (ws-butler-chg chg fontified t face font-lock-constant-face) 188 190 (ws-butler-chg chg fontified t) 190 191 (ws-butler-chg chg fontified t face font-lock-function-name-face) 191 192 (ws-butler-chg delete fontified t face font-lock-function-name-face) 192 193 (ws-butler-chg chg fontified t face font-lock-function-name-face) 193 194 (ws-butler-chg chg fontified t face font-lock-function-name-face) 194 195 (ws-butler-chg chg fontified t face font-lock-function-name-face) 195 196 (ws-butler-chg delete fontified t face font-lock-function-name-face) 196 203 (ws-butler-chg chg fontified t face font-lock-function-name-face) 203 205 (ws-butler-chg chg fontified t) 205 210 (ws-butler-chg chg fontified t) 210 212 (ws-butler-chg chg fontified t face font-lock-keyword-face) 212 256 (ws-butler-chg chg fontified t) 256 262 (ws-butler-chg chg fontified t face font-lock-keyword-face) 262 264 (ws-butler-chg chg fontified t) 264 268 (ws-butler-chg chg fontified t face font-lock-type-face) 268 297 (ws-butler-chg chg fontified t) 297 308 (ws-butler-chg chg fontified t) 308 337 (ws-butler-chg chg fontified t) 337 344 (ws-butler-chg chg fontified t) 344 348 (ws-butler-chg chg fontified t) 348 354 (ws-butler-chg chg fontified t face font-lock-keyword-face) 354 355 (ws-butler-chg chg fontified t) 355 360 (ws-butler-chg chg fontified t face font-lock-constant-face) 360 364 (ws-butler-chg chg fontified t) 364 367 (ws-butler-chg chg fontified t face font-lock-type-face) 367 368 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 368 369 (ws-butler-chg chg fontified t) 369 370 (ws-butler-chg chg fontified t face font-lock-constant-face) 370 381 (ws-butler-chg chg fontified t face font-lock-constant-face) 381 383 (ws-butler-chg chg fontified t) 383 384 (ws-butler-chg chg fontified t face font-lock-function-name-face) 384 385 (ws-butler-chg delete fontified t face font-lock-function-name-face) 385 386 (ws-butler-chg chg fontified t face font-lock-function-name-face) 386 387 (ws-butler-chg chg fontified t face font-lock-function-name-face) 387 388 (ws-butler-chg chg fontified t face font-lock-function-name-face) 388 389 (ws-butler-chg delete fontified t face font-lock-function-name-face) 389 395 (ws-butler-chg chg fontified t face font-lock-function-name-face) 395 396 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 396 400 (ws-butler-chg chg fontified t face font-lock-type-face) 400 401 (ws-butler-chg chg fontified t) 401 402 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 402 403 (ws-butler-chg chg fontified t) 403 408 (ws-butler-chg chg fontified t) 408 410 (ws-butler-chg chg fontified t face font-lock-keyword-face) 410 500 (ws-butler-chg chg fontified t) 500 506 (ws-butler-chg chg fontified t) 506 510 (ws-butler-chg chg fontified t) 510 513 (ws-butler-chg chg fontified t face font-lock-type-face) 513 514 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 514 515 (ws-butler-chg chg fontified t) 515 527 (ws-butler-chg chg fontified t face font-lock-constant-face) 527 529 (ws-butler-chg chg fontified t) 529 530 (ws-butler-chg chg fontified t face font-lock-function-name-face) 530 531 (ws-butler-chg delete fontified t face font-lock-function-name-face) 531 532 (ws-butler-chg chg fontified t face font-lock-function-name-face) 532 533 (ws-butler-chg chg fontified t face font-lock-function-name-face) 533 534 (ws-butler-chg chg fontified t face font-lock-function-name-face) 534 535 (ws-butler-chg delete fontified t face font-lock-function-name-face) 535 537 (ws-butler-chg chg fontified t face font-lock-function-name-face) 537 538 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 538 542 (ws-butler-chg chg fontified t face font-lock-type-face) 542 543 (ws-butler-chg chg fontified t) 543 544 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 544 545 (ws-butler-chg chg fontified t) 545 550 (ws-butler-chg chg fontified t) 550 552 (ws-butler-chg chg fontified t face font-lock-keyword-face) 552 558 (ws-butler-chg chg fontified t) 558 575 (ws-butler-chg chg fontified t) 575 655 (ws-butler-chg chg fontified t) 655 658 (ws-butler-chg chg fontified t face font-lock-type-face) 658 659 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 659 660 (ws-butler-chg chg fontified t) 660 672 (ws-butler-chg chg fontified t face font-lock-constant-face) 672 674 (ws-butler-chg chg fontified t) 674 675 (ws-butler-chg chg fontified t face font-lock-function-name-face) 675 676 (ws-butler-chg delete fontified t face font-lock-function-name-face) 676 677 (ws-butler-chg chg fontified t face font-lock-function-name-face) 677 678 (ws-butler-chg chg fontified t face font-lock-function-name-face) 678 679 (ws-butler-chg chg fontified t face font-lock-function-name-face) 679 680 (ws-butler-chg delete fontified t face font-lock-function-name-face) 680 686 (ws-butler-chg chg fontified t face font-lock-function-name-face) 686 688 (ws-butler-chg chg fontified t) 688 693 (ws-butler-chg chg fontified t) 693 695 (ws-butler-chg chg fontified t face font-lock-keyword-face) 695 708 (ws-butler-chg chg fontified t) 708 721 (ws-butler-chg chg fontified t) 721 733 (ws-butler-chg chg fontified t) 733 737 (ws-butler-chg chg fontified t) 737 743 (ws-butler-chg chg fontified t face font-lock-keyword-face) 743 745 (ws-butler-chg chg fontified t) 745 749 (ws-butler-chg chg fontified t face font-lock-type-face) 749 811 (ws-butler-chg chg fontified t) 811 821 (ws-butler-chg chg fontified t)) . 1605) (undo-tree-id143 . -18) (undo-tree-id144 . -170) (undo-tree-id145 . -48) (undo-tree-id146 . -55) (undo-tree-id147 . -171) (undo-tree-id148 . -363) (undo-tree-id149 . -364) (undo-tree-id150 . -509) (undo-tree-id151 . -396) (undo-tree-id152 . -403) (undo-tree-id153 . -510) (undo-tree-id154 . -654) (undo-tree-id155 . -538) (undo-tree-id156 . -545) (undo-tree-id157 . -655) (undo-tree-id158 . -17)) nil (25139 21031 112947 899000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -2731) (undo-tree-id160 . -1) 2732 (t 25139 21031 116229 563000)) nil (25139 21062 128853 108000) 0 nil])
([nil nil ((2731 . 2732)) nil (25139 21062 128829 208000) 0 nil])
([nil nil ((#(" m_" 0 3 (ws-butler-chg chg)) . -8824) (8827 . 8828) (#(" m_" 0 3 (ws-butler-chg chg)) . -8695) (8698 . 8699) (#(" m_" 0 3 (ws-butler-chg chg)) . -8317) (8320 . 8321) (#(" m_" 0 3 (ws-butler-chg chg)) . -8263) (8266 . 8267) (#(" m_" 0 3 (ws-butler-chg chg)) . -8152) (8155 . 8156) (#(" m_" 0 3 (ws-butler-chg chg)) . -8083) (8086 . 8087) (#(" m_" 0 3 (ws-butler-chg chg)) . -7985) (7988 . 7989) (#(" m_" 0 3 (ws-butler-chg chg)) . -7957) (7960 . 7961) (#(" m_" 0 3 (ws-butler-chg chg)) . -7928) (7931 . 7932) (#(" m_" 0 3 (ws-butler-chg chg)) . -7517) (7520 . 7521) (#(" m_" 0 3 (ws-butler-chg chg)) . -7473) (7476 . 7477) (#(" m_" 0 3 (ws-butler-chg chg)) . -7295) (7298 . 7299) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -7172) (7175 . 7176) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -7162) (7165 . 7166) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -7144) (7147 . 7148) (#(" m_" 0 3 (ws-butler-chg chg)) . -7140) (7143 . 7144) (#(" m_" 0 3 (ws-butler-chg chg)) . -7055) (7058 . 7059) (#(" m_" 0 3 (ws-butler-chg chg)) . -6946) (6949 . 6950) (#(" m_" 0 3 (ws-butler-chg chg)) . -6785) (6788 . 6789) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -6678) (6681 . 6682) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -6667) (6670 . 6671) (#(" m_" 0 3 (ws-butler-chg chg)) . -6637) (6640 . 6641) (#(" m_" 0 1 (ws-butler-chg chg c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg c-is-sws t) 2 3 (ws-butler-chg chg)) . -6541) (6544 . 6545) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -6471) (6474 . 6475) (#(" m_" 0 3 (ws-butler-chg chg)) . -6460) (6463 . 6464) (#(" m_" 0 3 (ws-butler-chg chg fontified nil)) . -6319) (6322 . 6323) (#(" m_" 0 3 (ws-butler-chg chg)) . -6301) (6304 . 6305) (#(" m_" 0 3 (ws-butler-chg chg)) . -6252) (6255 . 6256) (#(" m_" 0 3 (ws-butler-chg chg)) . -5315) (5318 . 5319) (#(" m_" 0 3 (ws-butler-chg chg)) . -5252) (5255 . 5256) (#(" m_" 0 3 (ws-butler-chg chg)) . -5186) (5189 . 5190) (#(" m_" 0 1 (ws-butler-chg chg c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg c-is-sws t) 2 3 (ws-butler-chg chg)) . -4974) (4977 . 4978) (#(" m_" 0 3 (ws-butler-chg chg)) . -4157) (4160 . 4161) (#(" m_" 0 3 (ws-butler-chg chg)) . -3940) (3943 . 3944) (#(" m_" 0 1 (ws-butler-chg chg c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg c-is-sws t) 2 3 (ws-butler-chg chg)) . -3905) (3908 . 3909) (#(" m_" 0 3 (ws-butler-chg chg)) . -3868) (3871 . 3872) (#(" m_" 0 3 (ws-butler-chg chg)) . -3852) (3855 . 3856) (#(" m_" 0 1 (ws-butler-chg chg c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg c-is-sws t) 2 3 (ws-butler-chg chg)) . -3829) (3832 . 3833) (#(" m_" 0 3 (ws-butler-chg chg)) . -3778) (3781 . 3782) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t)) . -3757) (3760 . 3761) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3738) (3741 . 3742) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3387) (3390 . 3391) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3367) (3370 . 3371) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3249) (3252 . 3253) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3189) (3192 . 3193) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3137) (3140 . 3141) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3042) (3045 . 3046) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -3017) (3020 . 3021) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2875) (2878 . 2879) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2859) (2862 . 2863) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2768) (2771 . 2772) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2748) (2751 . 2752) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2731) (2734 . 2735) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2667) (2670 . 2671) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2653) (2656 . 2657) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2635) (2638 . 2639) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2623) (2626 . 2627) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -2613) (2616 . 2617) (#(" m_" 0 3 (fontified t ws-butler-chg chg)) . -2382) (2385 . 2386) (#(" m_" 0 3 (fontified t ws-butler-chg chg)) . -2217) (2220 . 2221) (#(" m_" 0 3 (fontified t ws-butler-chg chg)) . -2075) (2078 . 2079) (#(" m_" 0 3 (fontified t ws-butler-chg chg)) . -1909) (1912 . 1913) (#(" m_" 0 3 (fontified t ws-butler-chg chg)) . -1737) (1740 . 1741) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -1570) (1573 . 1574) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -1225) (1228 . 1229) (#(" m_" 0 3 (ws-butler-chg chg fontified t)) . -1215) (1218 . 1219) 120) nil (25139 21062 128795 308000) 0 nil])
([nil nil ((#("/** ******************************************/
" 0 1 (fontified t face font-lock-doc-face c-in-sws t c-is-sws t) 1 4 (fontified t face font-lock-doc-face c-in-sws t) 4 45 (fontified t face font-lock-doc-face c-in-sws t) 45 47 (fontified t face font-lock-doc-face c-in-sws t) 47 48 (fontified t c-in-sws t)) . 194) (undo-tree-id195 . -48) (t 25139 21062 132895 60000)) nil (25139 21156 458366 111000) 0 nil])
([nil nil ((#("/** The step motor configuration structuure  */
" 0 1 (fontified t c-in-sws t c-is-sws t ws-butler-chg delete face font-lock-doc-face) 1 4 (fontified t c-in-sws t face font-lock-doc-face) 4 43 (fontified t c-in-sws t face font-lock-doc-face) 43 46 (fontified t c-in-sws t face font-lock-doc-face) 46 47 (fontified t face font-lock-doc-face c-in-sws t) 47 48 (fontified t c-is-sws t c-in-sws t)) . 194) (undo-tree-id194 . -48)) nil (25139 21156 458143 810000) 0 nil])
([nil nil ((#("/** ******************************************/
" 0 1 (fontified t c-in-sws t c-is-sws t ws-butler-chg delete face font-lock-doc-face) 1 4 (fontified t c-in-sws t face font-lock-doc-face) 4 45 (fontified t c-in-sws t face font-lock-doc-face) 45 46 (fontified t c-in-sws t face font-lock-doc-face) 46 47 (fontified t face font-lock-doc-face c-in-sws t) 47 48 (fontified t c-is-sws t c-in-sws t)) . 194) (undo-tree-id193 . -48)) nil (25139 21156 458127 411000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 194) (undo-tree-id191 . -1) (undo-tree-id192 . -1)) nil (25139 21156 458111 811000) 0 nil])
([nil nil ((#("StepMotorConfig::StepMotorConfig() {}
" 0 1 (fontified t c-is-sws t ws-butler-chg delete face font-lock-constant-face) 1 15 (fontified t face font-lock-constant-face) 15 17 (fontified t) 17 32 (fontified t face font-lock-function-name-face) 32 38 (fontified t)) . 194) (undo-tree-id189 . -37) (undo-tree-id190 . -38)) nil (25139 21156 458095 211000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 194) (undo-tree-id187 . -1) (undo-tree-id188 . -1)) nil (25139 21156 458078 810000) 0 nil])
([nil nil ((#("void StepMotorConfig::init() {
" 0 1 (fontified t ws-butler-chg delete face font-lock-type-face) 1 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t) 5 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 23 (fontified t ws-butler-chg chg face font-lock-function-name-face) 23 24 (fontified t ws-butler-chg delete face font-lock-function-name-face) 24 26 (fontified t face font-lock-function-name-face) 26 28 (fontified t) 28 31 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id185 . -28) (undo-tree-id186 . -31)) nil (25139 21156 458062 310000) 0 nil])
([nil nil ((#("  // Configure motor gemotery and characteristics
" 0 1 (fontified t ws-butler-chg delete c-in-sws t c-is-sws t) 1 2 (fontified t ws-butler-chg chg c-in-sws t c-is-sws t) 2 3 (fontified t ws-butler-chg chg c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 3 5 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-delimiter-face) 5 50 (fontified t ws-butler-chg chg c-in-sws t face font-lock-comment-face)) . 194) (undo-tree-id184 . -50)) nil (25139 21156 458045 510000) 0 nil])
([nil nil ((#("  microsteps_per_turn = microsteps * steps_per_turn;
" 0 1 (fontified t ws-butler-chg delete c-is-sws t c-in-sws t) 1 2 (fontified t ws-butler-chg chg c-is-sws t c-in-sws t) 2 3 (fontified t ws-butler-chg chg c-is-sws t) 3 53 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id183 . -53)) nil (25139 21156 458030 111000) 0 nil])
([nil nil ((#("  distance_per_step = rotation_distance / microsteps_per_turn;
" 0 1 (fontified t ws-butler-chg delete) 1 63 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id182 . -63)) nil (25139 21156 458014 811000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id180 . -1) (undo-tree-id181 . -2)) nil (25139 21156 457999 410000) 0 nil])
([nil nil ((#("/** Convert steps quantity to the real units */
" 0 1 (fontified t ws-butler-chg delete c-in-sws t c-is-sws t face font-lock-doc-face) 1 4 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 4 44 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 44 46 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 46 47 (fontified t ws-butler-chg chg face font-lock-doc-face c-in-sws t) 47 48 (fontified t ws-butler-chg chg c-is-sws t c-in-sws t)) . 194) (undo-tree-id178 . -48) (undo-tree-id179 . -48)) nil (25139 21156 457982 10000) 0 nil])
([nil nil ((#("unit_t Motor::steps_to_units(unit_t steps) {
" 0 1 (fontified t ws-butler-chg delete c-is-sws t face font-lock-type-face) 1 5 (fontified t ws-butler-chg chg face font-lock-type-face) 5 6 (fontified t ws-butler-chg chg c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t ws-butler-chg chg) 7 12 (fontified t ws-butler-chg chg face font-lock-constant-face) 12 14 (fontified t ws-butler-chg chg) 14 28 (fontified t ws-butler-chg chg face font-lock-function-name-face) 28 29 (fontified t ws-butler-chg chg c-type c-decl-arg-start) 29 35 (fontified t ws-butler-chg chg face font-lock-type-face) 35 36 (fontified t ws-butler-chg chg) 36 41 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 41 45 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id175 . -29) (undo-tree-id176 . -42) (undo-tree-id177 . -45)) nil (25139 21156 457965 811000) 0 nil])
([nil nil ((#("  float rotations = (float)steps / (float)microsteps_per_turn;
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg) 2 6 (fontified t ws-butler-chg chg face font-lock-type-face) 6 7 (fontified t ws-butler-chg chg c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t ws-butler-chg chg) 8 17 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 17 21 (fontified t ws-butler-chg chg) 21 26 (fontified t ws-butler-chg chg face font-lock-type-face) 26 36 (fontified t ws-butler-chg chg) 36 41 (fontified t ws-butler-chg chg face font-lock-type-face) 41 63 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id173 . -63) (undo-tree-id174 . -63)) nil (25139 21156 457948 610000) 0 nil])
([nil nil ((#("  return rotations * rotation_distance;
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg) 2 8 (fontified t ws-butler-chg chg face font-lock-keyword-face) 8 40 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id172 . -40)) nil (25139 21156 457932 11000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id170 . -1) (undo-tree-id171 . -2)) nil (25139 21156 457916 410000) 0 nil])
([nil nil ((#("/** Convert steps quantity to the real units */
" 0 1 (fontified t ws-butler-chg delete c-in-sws t c-is-sws t face font-lock-doc-face) 1 4 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 4 44 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 44 46 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 46 47 (fontified t ws-butler-chg chg face font-lock-doc-face c-in-sws t) 47 48 (fontified t ws-butler-chg chg c-is-sws t c-in-sws t)) . 194) (undo-tree-id168 . -48) (undo-tree-id169 . -48)) nil (25139 21156 457899 810000) 0 nil])
([nil nil ((#("step_t Motor::units_to_steps(unit_t units) {
" 0 1 (fontified t ws-butler-chg delete c-is-sws t face font-lock-type-face) 1 5 (fontified t ws-butler-chg chg face font-lock-type-face) 5 6 (fontified t ws-butler-chg chg c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t ws-butler-chg chg) 7 12 (fontified t ws-butler-chg chg face font-lock-constant-face) 12 14 (fontified t ws-butler-chg chg) 14 28 (fontified t ws-butler-chg chg face font-lock-function-name-face) 28 29 (fontified t ws-butler-chg chg c-type c-decl-arg-start) 29 35 (fontified t ws-butler-chg chg face font-lock-type-face) 35 36 (fontified t ws-butler-chg chg) 36 41 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 41 45 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id165 . -29) (undo-tree-id166 . -42) (undo-tree-id167 . -45)) nil (25139 21156 457883 10000) 0 nil])
([nil nil ((#("  float rotations = (float)units / rotation_distance;
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg) 2 6 (fontified t ws-butler-chg chg face font-lock-type-face) 6 7 (fontified t ws-butler-chg chg c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t ws-butler-chg chg) 8 10 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 10 17 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 17 19 (fontified t ws-butler-chg chg) 19 21 (fontified t ws-butler-chg chg) 21 26 (fontified t ws-butler-chg chg face font-lock-type-face) 26 54 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id164 . -54)) nil (25139 21156 457865 410000) 0 nil])
([nil nil ((#("  return (step_t)(rotations * microsteps_per_turn);
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg) 2 8 (fontified t ws-butler-chg chg face font-lock-keyword-face) 8 10 (fontified t ws-butler-chg chg) 10 16 (fontified t ws-butler-chg chg face font-lock-type-face) 16 52 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id163 . -52)) nil (25139 21156 457849 110000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t ws-butler-chg chg)) . 194) (undo-tree-id161 . -1) (undo-tree-id162 . -2)) nil (25139 21156 457830 910000) 0 nil])
([nil nil ((#("/** ******************************************/
" 0 1 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 1 4 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 4 45 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 45 46 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 46 47 (ws-butler-chg chg fontified t face font-lock-doc-face c-in-sws t) 47 48 (ws-butler-chg chg fontified t c-in-sws t)) . 195) (undo-tree-id268 . -48) (t 25139 21156 462891 479000)) nil (25139 21322 553287 984000) 0 nil])
([nil nil ((#("/** The GPIO driver of the StepMotor         */
" 0 1 (ws-butler-chg delete c-in-sws t fontified t c-is-sws t face font-lock-doc-face) 1 4 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 4 36 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 36 46 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 46 47 (ws-butler-chg chg fontified t face font-lock-doc-face c-in-sws t) 47 48 (ws-butler-chg chg fontified t c-is-sws t c-in-sws t)) . 195) (undo-tree-id267 . -48)) nil (25139 21322 553269 84000) 0 nil])
([nil nil ((#("/** ******************************************/
" 0 1 (ws-butler-chg delete c-in-sws t fontified t c-is-sws t face font-lock-doc-face) 1 4 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 4 45 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 45 46 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 46 47 (ws-butler-chg chg fontified t face font-lock-doc-face c-in-sws t) 47 48 (ws-butler-chg chg fontified t c-is-sws t c-in-sws t)) . 195) (undo-tree-id266 . -48)) nil (25139 21322 553250 784000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id264 . -1) (undo-tree-id265 . -1)) nil (25139 21322 553231 684000) 0 nil])
([nil nil ((#("StepMotorHAL::StepMotorHAL() {}
" 0 1 (ws-butler-chg delete c-is-sws t fontified t face font-lock-constant-face) 1 12 (ws-butler-chg chg fontified t face font-lock-constant-face) 12 14 (ws-butler-chg chg fontified t) 14 26 (ws-butler-chg chg fontified t face font-lock-function-name-face) 26 32 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id262 . -31) (undo-tree-id263 . -32)) nil (25139 21322 553215 84000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id260 . -1) (undo-tree-id261 . -1)) nil (25139 21322 553197 484000) 0 nil])
([nil nil ((#("void StepMotorHAL::init(int id, StepMotorConfig* config) {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg delete fontified t face font-lock-function-name-face) 21 23 (ws-butler-chg chg fontified t face font-lock-function-name-face) 23 24 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 24 27 (ws-butler-chg chg fontified t face font-lock-type-face) 27 28 (ws-butler-chg chg fontified t) 28 30 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 30 31 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 31 32 (ws-butler-chg chg fontified t) 32 47 (ws-butler-chg chg fontified t face font-lock-type-face) 47 49 (ws-butler-chg chg fontified t) 49 55 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 55 56 (ws-butler-chg chg fontified t) 56 59 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id255 . -24) (undo-tree-id256 . -31) (undo-tree-id257 . -32) (undo-tree-id258 . -56) (undo-tree-id259 . -59)) nil (25139 21322 553181 84000) 0 nil])
([nil nil ((#("  id(id);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 10 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id254 . -10)) nil (25139 21322 553162 283000) 0 nil])
([nil nil ((#("  config(config);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 17 (ws-butler-chg chg fontified t) 17 18 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id252 . -18) (undo-tree-id253 . -18)) nil (25139 21322 553146 684000) 0 nil])
([nil nil ((#("  ESP_LOGI(TAG, \"[%d] Initialize step motor\", id);
" 0 1 (ws-butler-chg delete fontified t) 1 16 (ws-butler-chg chg fontified t) 16 44 (ws-butler-chg chg fontified t face font-lock-string-face) 44 51 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id251 . -51)) nil (25139 21322 553130 284000) 0 nil])
([nil nil ((#("  set_gpio_oc(m_config->step_pin);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 13 (ws-butler-chg chg fontified t) 13 33 (ws-butler-chg chg fontified t) 33 35 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id250 . -35)) nil (25139 21322 553114 684000) 0 nil])
([nil nil ((#("  set_gpio_oc(m_config->dir_pin);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 13 (ws-butler-chg chg fontified t) 13 32 (ws-butler-chg chg fontified t) 32 34 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id249 . -34)) nil (25139 21322 553098 583000) 0 nil])
([nil nil ((#("  set_gpio_oc(m_config->enable_pin);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 13 (ws-butler-chg chg fontified t) 13 18 (ws-butler-chg chg fontified t) 18 35 (ws-butler-chg chg fontified t) 35 37 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id248 . -37)) nil (25139 21322 553083 84000) 0 nil])
([nil nil ((#("  set_gpio_in(m_config->endstop_pin);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t) 4 5 (ws-butler-chg chg fontified t) 5 6 (ws-butler-chg chg fontified t) 6 7 (ws-butler-chg delete fontified t) 7 10 (ws-butler-chg chg fontified t) 10 11 (ws-butler-chg chg fontified t) 11 12 (ws-butler-chg chg fontified t) 12 13 (ws-butler-chg chg fontified t) 13 36 (ws-butler-chg chg fontified t) 36 37 (ws-butler-chg chg fontified t) 37 38 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id247 . -38)) nil (25139 21322 553067 384000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id244 . -1) (undo-tree-id245 . -2) (undo-tree-id246 . -2)) nil (25139 21322 553051 684000) 0 nil])
([nil nil ((#("bool StepMotorHAL::get_enable() {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg delete fontified t face font-lock-function-name-face) 21 22 (ws-butler-chg chg fontified t face font-lock-function-name-face) 22 23 (ws-butler-chg chg fontified t face font-lock-function-name-face) 23 24 (ws-butler-chg chg fontified t face font-lock-function-name-face) 24 25 (ws-butler-chg delete fontified t face font-lock-function-name-face) 25 29 (ws-butler-chg chg fontified t face font-lock-function-name-face) 29 31 (ws-butler-chg chg fontified t) 31 34 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id243 . -34)) nil (25139 21322 553034 483000) 0 nil])
([nil nil ((#("  if (m_config->enable_pin != GPIO_NULL)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 41 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id242 . -41)) nil (25139 21322 553019 184000) 0 nil])
([nil nil ((#("    return (bool)gpio_get_level(m_config->enable_pin) ^^ config->enable_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 10 (ws-butler-chg chg fontified t face font-lock-keyword-face) 10 12 (ws-butler-chg chg fontified t) 12 16 (ws-butler-chg chg fontified t face font-lock-type-face) 16 56 (ws-butler-chg chg fontified t) 56 57 (ws-butler-chg chg fontified t) 57 84 (ws-butler-chg chg fontified t) 84 85 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id241 . -85)) nil (25139 21322 553001 684000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id240 . -1)) nil (25139 21322 552986 284000) 0 nil])
([nil nil ((#("  return false;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t) 9 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 16 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id239 . -16)) nil (25139 21322 552970 884000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id236 . -1) (undo-tree-id237 . -2) (undo-tree-id238 . -2)) nil (25139 21322 552955 84000) 0 nil])
([nil nil ((#("void StepMotorHAL::set_enable(bool v) {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 29 (ws-butler-chg chg fontified t face font-lock-function-name-face) 29 30 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 30 34 (ws-butler-chg chg fontified t face font-lock-type-face) 34 35 (ws-butler-chg chg fontified t) 35 36 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 36 40 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id233 . -30) (undo-tree-id234 . -37) (undo-tree-id235 . -40)) nil (25139 21322 552937 684000) 0 nil])
([nil nil ((#("  if (m_config->enable_pin != GPIO_NULL)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 41 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id232 . -41)) nil (25139 21322 552920 84000) 0 nil])
([nil nil ((#("    set_pin(m_config->enable_pin, v ^^ config->enable_pin_reverse);
" 0 1 (ws-butler-chg delete fontified t) 1 15 (ws-butler-chg chg fontified t) 15 33 (ws-butler-chg chg fontified t) 33 38 (ws-butler-chg chg fontified t) 38 39 (ws-butler-chg chg fontified t) 39 66 (ws-butler-chg chg fontified t) 66 68 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id231 . -68)) nil (25139 21322 552904 484000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id228 . -1) (undo-tree-id229 . -2) (undo-tree-id230 . -2)) nil (25139 21322 552888 884000) 0 nil])
([nil nil ((#("bool StepMotorHAL::get_direction() {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 32 (ws-butler-chg chg fontified t face font-lock-function-name-face) 32 37 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id227 . -37)) nil (25139 21322 552871 584000) 0 nil])
([nil nil ((#("  if (m_config->direction_pin != GPIO_NULL)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 44 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id226 . -44)) nil (25139 21322 552856 184000) 0 nil])
([nil nil ((#("    return (bool)gpio_get_level(m_config->direction_pin) ^^ config->direction_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 10 (ws-butler-chg chg fontified t face font-lock-keyword-face) 10 12 (ws-butler-chg chg fontified t) 12 16 (ws-butler-chg chg fontified t face font-lock-type-face) 16 49 (ws-butler-chg chg fontified t) 49 56 (ws-butler-chg chg fontified t) 56 59 (ws-butler-chg chg fontified t) 59 60 (ws-butler-chg chg fontified t) 60 90 (ws-butler-chg chg fontified t) 90 91 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id225 . -91)) nil (25139 21322 552840 784000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id224 . -1)) nil (25139 21322 552825 184000) 0 nil])
([nil nil ((#("  return false;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t) 9 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 16 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id223 . -16)) nil (25139 21322 552809 583000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id220 . -1) (undo-tree-id221 . -2) (undo-tree-id222 . -2)) nil (25139 21322 552793 584000) 0 nil])
([nil nil ((#("void StepMotorHAL::set_directon(bool v) {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 31 (ws-butler-chg chg fontified t face font-lock-function-name-face) 31 32 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 32 36 (ws-butler-chg chg fontified t face font-lock-type-face) 36 37 (ws-butler-chg chg fontified t) 37 38 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 38 42 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id217 . -32) (undo-tree-id218 . -39) (undo-tree-id219 . -42)) nil (25139 21322 552775 684000) 0 nil])
([nil nil ((#("  if (m_config->dir_pin != GPIO_NULL)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 12 (ws-butler-chg chg fontified t) 12 26 (ws-butler-chg chg fontified t) 26 38 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id216 . -38)) nil (25139 21322 552758 283000) 0 nil])
([nil nil ((#("    set_pin(m_config->dir_pin, v ^^ config->dir_pin_reverse);
" 0 1 (ws-butler-chg delete fontified t) 1 35 (ws-butler-chg chg fontified t) 35 36 (ws-butler-chg chg fontified t) 36 53 (ws-butler-chg chg fontified t) 53 60 (ws-butler-chg chg fontified t) 60 62 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id215 . -62)) nil (25139 21322 552731 284000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id212 . -1) (undo-tree-id213 . -2) (undo-tree-id214 . -2)) nil (25139 21322 552715 584000) 0 nil])
([nil nil ((#("void StepMotorHAL::set_step(bool v) {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 27 (ws-butler-chg chg fontified t face font-lock-function-name-face) 27 28 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 28 32 (ws-butler-chg chg fontified t face font-lock-type-face) 32 33 (ws-butler-chg chg fontified t) 33 34 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 34 38 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id209 . -28) (undo-tree-id210 . -35) (undo-tree-id211 . -38)) nil (25139 21322 552697 783000) 0 nil])
([nil nil ((#("  if (m_config->step_pin != GPIO_NULL)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 39 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id208 . -39)) nil (25139 21322 552680 84000) 0 nil])
([nil nil ((#("    set_pin(m_config->step_pin, v ^^ config->step_pin_reverse);
" 0 1 (ws-butler-chg delete fontified t) 1 36 (ws-butler-chg chg fontified t) 36 37 (ws-butler-chg chg fontified t) 37 62 (ws-butler-chg chg fontified t) 62 64 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id207 . -64)) nil (25139 21322 552664 84000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id204 . -1) (undo-tree-id205 . -2) (undo-tree-id206 . -2)) nil (25139 21322 552647 984000) 0 nil])
([nil nil ((#("bool StepMotorHAL::get_endpoint() {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 17 (ws-butler-chg chg fontified t face font-lock-constant-face) 17 19 (ws-butler-chg chg fontified t) 19 31 (ws-butler-chg chg fontified t face font-lock-function-name-face) 31 36 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id203 . -36)) nil (25139 21322 552630 283000) 0 nil])
([nil nil ((#("  if (m_config->endstop_pin != GPIO_NULL)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 42 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id202 . -42)) nil (25139 21322 552614 884000) 0 nil])
([nil nil ((#("    return (bool)gpio_get_level(m_config->endstop_pin) ^^ config->endstop_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 10 (ws-butler-chg chg fontified t face font-lock-keyword-face) 10 12 (ws-butler-chg chg fontified t) 12 16 (ws-butler-chg chg fontified t face font-lock-type-face) 16 57 (ws-butler-chg chg fontified t) 57 58 (ws-butler-chg chg fontified t) 58 81 (ws-butler-chg chg fontified t) 81 86 (ws-butler-chg chg fontified t) 86 87 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id201 . -87)) nil (25139 21322 552599 284000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id200 . -1)) nil (25139 21322 552583 184000) 0 nil])
([nil nil ((#("  return false;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t) 9 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 16 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id199 . -16)) nil (25139 21322 552566 184000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 195) (undo-tree-id197 . -1) (undo-tree-id198 . -2)) nil (25139 21322 552549 683000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 195) (undo-tree-id196 . -1)) nil (25139 21322 552528 584000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 1181) (t 25139 21322 559551 831000)) nil (25139 21354 693838 152000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t c-in-sws t ws-butler-chg delete face font-lock-string-face)) . 136) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("p" 0 1 (fontified t face font-lock-string-face c-in-sws t)) . 136) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (t 25139 21354 699550 606000)) nil (25139 23124 156031 59000) 0 nil])
([nil nil ((156 . 157) (t 25139 23124 162816 688000)) nil (25139 23420 455921 258000) 0 nil])
([nil nil ((177 . 178) (nil syntax-table nil 177 . 178) (nil syntax-table (1) 165 . 166) (176 . 177) (nil syntax-table nil 176 . 177) (nil syntax-table (1) 165 . 166) (175 . 176) (nil syntax-table nil 175 . 176) (nil syntax-table (1) 165 . 166) (174 . 175) (nil syntax-table nil 174 . 175) (nil syntax-table (1) 165 . 166) (173 . 174) (nil syntax-table nil 173 . 174) (nil syntax-table (1) 165 . 166) (172 . 173) (nil syntax-table nil 172 . 173) (nil syntax-table (1) 165 . 166) (171 . 172) (nil syntax-table nil 171 . 172) (nil syntax-table (1) 165 . 166) (170 . 171) (nil syntax-table nil 170 . 171) (nil syntax-table (1) 165 . 166) (169 . 170) (nil syntax-table nil 169 . 170) (nil syntax-table (1) 165 . 166) (168 . 169) (nil syntax-table nil 168 . 169) (nil syntax-table (1) 165 . 166) (167 . 168) (nil syntax-table nil 167 . 168) (nil syntax-table (1) 165 . 166) (166 . 167) (nil syntax-table nil 166 . 167) (nil syntax-table (1) 165 . 166) (157 . 166)) nil (25139 23420 455906 759000) 0 nil])
([nil nil ((182 . 183) (nil syntax-table nil 182 . 183) (nil syntax-table (1) 165 . 166) (181 . 182) (nil syntax-table nil 181 . 182) (nil syntax-table (1) 165 . 166) (180 . 181) (nil syntax-table nil 180 . 181) (nil syntax-table (1) 165 . 166) (179 . 180) (nil syntax-table nil 179 . 180) (nil syntax-table (1) 165 . 166) (178 . 179) (nil syntax-table nil 178 . 179) (nil syntax-table (1) 165 . 166)) nil (25139 23420 455884 658000) 0 nil])
([nil nil ((183 . 184)) nil (25139 23420 455867 958000) 0 nil])
([nil nil ((#("#include \"step_motor_hal.h\"
" 0 1 (fontified t c-is-sws t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 4 5 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 5 6 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 6 7 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 7 8 (fontified t ws-butler-chg chg c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t ws-butler-chg chg c-in-sws t) 9 10 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 10 11 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 11 12 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 12 13 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 13 14 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 14 15 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 15 16 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 16 17 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 17 18 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 18 19 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 19 20 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 20 21 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 21 22 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 22 23 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 23 24 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 24 25 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 25 26 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 26 27 (fontified t ws-butler-chg chg c-in-sws t face font-lock-string-face) 27 28 (fontified t ws-butler-chg chg c-in-sws t)) . 156) (undo-tree-id283 . -27)) nil (25139 23420 455854 858000) 0 nil])
([nil nil ((nil rear-nonsticky nil 183 . 184) (nil fontified nil 183 . 184) (nil fontified nil 182 . 183) (nil fontified nil 181 . 182) (nil fontified nil 180 . 181) (nil fontified nil 179 . 180) (nil fontified nil 178 . 179) (nil fontified nil 177 . 178) (nil fontified nil 176 . 177) (nil fontified nil 175 . 176) (nil fontified nil 174 . 175) (nil fontified nil 173 . 174) (nil fontified nil 172 . 173) (nil fontified nil 171 . 172) (nil fontified nil 170 . 171) (nil fontified nil 169 . 170) (nil fontified nil 168 . 169) (nil fontified nil 167 . 168) (nil fontified nil 166 . 167) (nil fontified nil 165 . 166) (nil fontified nil 164 . 165) (nil fontified nil 163 . 164) (nil fontified nil 162 . 163) (nil fontified nil 161 . 162) (nil fontified nil 160 . 161) (nil fontified nil 159 . 160) (nil fontified nil 158 . 159) (nil fontified nil 157 . 158) (nil fontified nil 156 . 157) (156 . 184)) nil (25139 23420 455838 258000) 0 nil])
([nil nil ((156 . 157)) nil (25139 23420 455818 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 183 . 184) (nil fontified nil 183 . 184) (nil fontified nil 182 . 183) (nil fontified nil 181 . 182) (nil fontified nil 180 . 181) (nil fontified nil 179 . 180) (nil fontified nil 178 . 179) (nil fontified nil 177 . 178) (nil fontified nil 176 . 177) (nil fontified nil 175 . 176) (nil fontified nil 174 . 175) (nil fontified nil 173 . 174) (nil fontified nil 172 . 173) (nil fontified nil 171 . 172) (nil fontified nil 170 . 171) (nil fontified nil 169 . 170) (nil fontified nil 168 . 169) (nil fontified nil 167 . 168) (nil fontified nil 166 . 167) (nil fontified nil 165 . 166) (nil fontified nil 164 . 165) (nil fontified nil 163 . 164) (nil fontified nil 162 . 163) (nil fontified nil 161 . 162) (nil fontified nil 160 . 161) (nil fontified nil 159 . 160) (nil fontified nil 158 . 159) (nil fontified nil 157 . 158) (nil fontified nil 156 . 157) (156 . 184)) nil (25139 23420 455804 558000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg c-in-sws t fontified t rear-nonsticky t)) . -183) (undo-tree-id282 . -1) 184) nil (25139 23420 455784 459000) 0 nil])
([nil nil ((#("h" 0 1 (ws-butler-chg chg fontified t c-in-sws t face font-lock-string-face)) . -177) (undo-tree-id279 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t c-in-sws t face font-lock-string-face)) . -178) (undo-tree-id280 . -1) (#("l" 0 1 (ws-butler-chg chg c-in-sws t fontified t face font-lock-string-face)) . -179) (undo-tree-id281 . -1) 180) nil (25139 23420 455767 158000) 0 nil])
([nil nil ((177 . 183)) nil (25139 23420 455733 958000) 0 nil])
([nil nil ((7174 . 7180) (t 25139 23420 462805 415000)) nil (25139 24415 252829 47000) 0 nil])
([nil nil ((#("." 0 1 (ws-butler-chg chg fontified t)) . -7179) (undo-tree-id298 . -1) 7180) nil (25139 24415 252815 947000) 0 nil])
([nil nil ((7179 . 7180)) nil (25139 24415 252800 547000) 0 nil])
([nil nil ((7180 . 7181)) nil (25139 24415 252788 347000) 0 nil])
([nil nil ((7181 . 7187)) nil (25139 24415 252775 747000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg chg fontified t)) . -7185) (undo-tree-id296 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -7186) (undo-tree-id297 . -1) 7187) nil (25139 24415 252762 447000) 0 nil])
([nil nil ((7185 . 7186)) nil (25139 24415 252745 547000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg chg fontified t)) . -7181) (undo-tree-id291 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -7182) (undo-tree-id292 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -7183) (undo-tree-id293 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t)) . -7184) (undo-tree-id294 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -7185) (undo-tree-id295 . -1) 7186) nil (25139 24415 252731 247000) 0 nil])
([nil nil ((7181 . 7187)) nil (25139 24415 252711 47000) 0 nil])
([nil nil ((#("i" 0 1 (ws-butler-chg chg fontified t)) . -7182) (undo-tree-id286 . -1) (#("v" 0 1 (ws-butler-chg chg fontified t)) . -7183) (undo-tree-id287 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t)) . -7184) (undo-tree-id288 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t)) . -7185) (undo-tree-id289 . -1) (#("g" 0 1 (ws-butler-chg chg fontified t)) . -7186) (undo-tree-id290 . -1) 7187) nil (25139 24415 252696 747000) 0 nil])
([nil nil ((7182 . 7187)) nil (25139 24415 252676 447000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("v" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("M" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#(":" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#(":" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("e" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7187) (#("t" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7187) (#("a" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7187) (#("t" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7187) (#("S" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7187) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("=" 0 1 (ws-butler-chg delete fontified t)) . 7187) (undo-tree-id284 . -1) (#("=" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7187) (undo-tree-id285 . -1) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 7187)) nil (25139 24415 252657 947000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("g" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("r" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("T" 0 1 (ws-butler-chg delete fontified t)) . 7187) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 7187)) nil (25139 24415 252618 647000) 0 nil])
([nil nil ((7391 . 7395) (t 25139 24415 259434 174000)) nil (25139 24472 354967 199000) 0 nil])
([nil nil ((7395 . 7397)) nil (25139 24472 354948 598000) 0 nil])
([nil nil ((#("<" 0 1 (ws-butler-chg chg fontified t)) . -7396) (undo-tree-id305 . -1) 7397) nil (25139 24472 354929 698000) 0 nil])
([nil nil ((7396 . 7402)) nil (25139 24472 354906 899000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg chg fontified t)) . -7400) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t)) . -7401) (undo-tree-id304 . -1) 7402) nil (25139 24472 354887 198000) 0 nil])
([nil nil ((7407 . 7409)) nil (25139 24472 354839 99000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg delete fontified t)) . 7409) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 7409) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7409) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 7409) (#("_" 0 1 (ws-butler-chg chg fontified t)) . 7409)) nil (25139 24472 354818 998000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg delete fontified t)) . 7409) (undo-tree-id299 . -1)) nil (25139 24472 354796 298000) 0 nil])
([nil nil ((7617 . 7623) (t 25139 24472 362765 333000)) nil (25139 24487 95963 929000) 0 nil])
([nil nil ((7623 . 7624)) nil (25139 24487 95951 329000) 0 nil])
([nil nil ((7624 . 7626)) nil (25139 24487 95939 29000) 0 nil])
([nil nil ((7626 . 7630)) nil (25139 24487 95926 529000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("v" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("M" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#(":" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#(":" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("e" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7630) (#("t" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7630) (#("a" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7630) (#("t" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7630) (#("S" 0 1 (ws-butler-chg delete fontified t face font-lock-constant-face)) . 7630) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("=" 0 1 (ws-butler-chg delete fontified t)) . 7630) (undo-tree-id306 . -1) (#("=" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7630) (undo-tree-id307 . -1) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("s" 0 1 (ws-butler-chg chg fontified t)) . 7630)) nil (25139 24487 95908 130000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("g" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("r" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("T" 0 1 (ws-butler-chg delete fontified t)) . 7630) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 7630)) nil (25139 24487 95874 529000) 0 nil])
([nil nil ((#("  while (!hal->get_endstop())
" 0 2 (ws-butler-chg chg fontified t) 2 7 (ws-butler-chg chg fontified t face font-lock-keyword-face) 7 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t face font-lock-negation-char-face) 10 11 (ws-butler-chg chg fontified t) 11 12 (ws-butler-chg chg fontified t) 12 13 (ws-butler-chg chg fontified t) 13 14 (ws-butler-chg chg fontified t) 14 15 (ws-butler-chg chg fontified t) 15 16 (ws-butler-chg chg fontified t) 16 17 (ws-butler-chg chg fontified t) 17 18 (ws-butler-chg chg fontified t) 18 19 (ws-butler-chg chg fontified t) 19 20 (ws-butler-chg delete fontified t) 20 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg chg fontified t) 27 28 (ws-butler-chg chg fontified t) 28 29 (ws-butler-chg delete fontified t) 29 30 (ws-butler-chg chg fontified t)) . 7381) (undo-tree-id315 . -30) (t 25139 24487 102764 770000)) nil (25139 24496 467834 251000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7410 . 7411) (nil fontified nil 7410 . 7411) (nil fontified nil 7409 . 7410) (nil fontified nil 7408 . 7409) (nil fontified nil 7407 . 7408) (nil fontified nil 7401 . 7407) (nil fontified nil 7400 . 7401) (nil fontified nil 7399 . 7400) (nil fontified nil 7398 . 7399) (nil fontified nil 7397 . 7398) (nil fontified nil 7396 . 7397) (nil fontified nil 7395 . 7396) (nil fontified nil 7394 . 7395) (nil fontified nil 7393 . 7394) (nil fontified nil 7392 . 7393) (nil fontified nil 7391 . 7392) (nil fontified nil 7390 . 7391) (nil fontified nil 7388 . 7390) (nil fontified nil 7383 . 7388) (nil fontified nil 7381 . 7383) (7381 . 7411)) nil (25139 24496 467814 52000) 0 nil])
([nil nil ((7830 . 7833)) nil (25139 24496 467796 251000) 0 nil])
([nil nil ((7831 . 7833) (#("    " 0 2 (ws-butler-chg chg fontified nil) 2 4 (ws-butler-chg chg fontified nil)) . 7831) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (nil rear-nonsticky nil 7862 . 7863) (nil fontified nil 7862 . 7863) (nil fontified nil 7861 . 7862) (nil fontified nil 7860 . 7861) (nil fontified nil 7859 . 7860) (nil fontified nil 7853 . 7859) (nil fontified nil 7852 . 7853) (nil fontified nil 7851 . 7852) (nil fontified nil 7850 . 7851) (nil fontified nil 7849 . 7850) (nil fontified nil 7848 . 7849) (nil fontified nil 7847 . 7848) (nil fontified nil 7846 . 7847) (nil fontified nil 7845 . 7846) (nil fontified nil 7844 . 7845) (nil fontified nil 7843 . 7844) (nil fontified nil 7842 . 7843) (nil fontified nil 7840 . 7842) (nil fontified nil 7835 . 7840) (nil fontified nil 7833 . 7835) (7833 . 7863)) nil (25139 24496 467780 851000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 7861) (undo-tree-id309 . -1)) nil (25139 24496 467531 451000) 0 nil])
([nil nil ((#("  while (!endstop_state)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 7 (ws-butler-chg chg fontified t face font-lock-keyword-face) 7 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t face font-lock-negation-char-face) 10 25 (ws-butler-chg chg fontified t)) . 7861) (undo-tree-id308 . -25)) nil (25139 24496 467513 551000) 0 nil])
([nil nil ((#("H" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -6882) (undo-tree-id316 . -1) 6883 (t 25139 24496 479431 81000)) nil (25139 24600 338547 1000) 0 nil])
([nil nil ((6882 . 6883)) nil (25139 24600 338522 801000) 0 nil])
([nil nil ((6888 . 6889)) nil (25139 24600 338500 501000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 6889)) nil (25139 24600 338485 901000) 0 nil])
([nil nil ((6889 . 6890)) nil (25139 24600 338471 701000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 6470)) nil (25139 24600 338452 1000) 0 nil])
([nil nil ((6470 . 6471)) nil (25139 24600 338435 1000) 0 nil])
([nil nil ((6474 . 6475)) nil (25139 24600 338422 701000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 6475)) nil (25139 24600 338410 401000) 0 nil])
([nil nil ((6475 . 6476)) nil (25139 24600 338397 901000) 0 nil])
([nil nil ((6604 . 6605)) nil (25139 24600 338385 401000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 6605)) nil (25139 24600 338369 801000) 0 nil])
([nil nil ((6605 . 6606)) nil (25139 24600 338344 801000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 6600)) nil (25139 24600 338328 401000) 0 nil])
([nil nil ((6600 . 6601)) nil (25139 24600 338314 101000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 5495)) nil (25139 24600 338299 501000) 0 nil])
([nil nil ((5495 . 5496)) nil (25139 24600 338268 201000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 5147) (t 25139 24600 416093 803000)) nil (25139 24705 394103 412000) 0 nil])
([nil nil ((5147 . 5148)) nil (25139 24705 394091 12000) 0 nil])
([nil nil ((5149 . 5150)) nil (25139 24705 394078 912000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 5150)) nil (25139 24705 394055 912000) 0 nil])
([nil nil ((5150 . 5151)) nil (25139 24705 394043 612000) 0 nil])
([nil nil ((5156 . 5157)) nil (25139 24705 394031 212000) 0 nil])
([nil nil ((#("H" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 5157)) nil (25139 24705 394018 812000) 0 nil])
([nil nil ((5157 . 5158)) nil (25139 24705 394006 312000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 5267)) nil (25139 24705 393993 812000) 0 nil])
([nil nil ((5267 . 5268)) nil (25139 24705 393981 412000) 0 nil])
([nil nil ((5270 . 5278)) nil (25139 24705 393968 912000) 0 nil])
([nil nil ((#("+" 0 1 (ws-butler-chg chg fontified t)) . -5277) (undo-tree-id326 . -1) 5278) nil (25139 24705 393955 812000) 0 nil])
([nil nil ((5277 . 5278)) nil (25139 24705 393940 212000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 5278)) nil (25139 24705 393927 612000) 0 nil])
([nil nil ((5278 . 5279)) nil (25139 24705 393915 412000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3987)) nil (25139 24705 393902 812000) 0 nil])
([nil nil ((3987 . 3988)) nil (25139 24705 393890 712000) 0 nil])
([nil nil ((3993 . 3995)) nil (25139 24705 393878 312000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3995)) nil (25139 24705 393865 712000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3366)) nil (25139 24705 393853 112000) 0 nil])
([nil nil ((3366 . 3367)) nil (25139 24705 393840 812000) 0 nil])
([nil nil ((3372 . 3374)) nil (25139 24705 393828 512000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3374)) nil (25139 24705 393816 12000) 0 nil])
([nil nil ((3378 . 3379)) nil (25139 24705 393803 712000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3379)) nil (25139 24705 393791 112000) 0 nil])
([nil nil ((3379 . 3380)) nil (25139 24705 393778 812000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2963)) nil (25139 24705 393766 412000) 0 nil])
([nil nil ((2963 . 2964)) nil (25139 24705 393754 112000) 0 nil])
([nil nil ((2966 . 2967)) nil (25139 24705 393742 12000) 0 nil])
([nil nil ((#("float StepMotor::get_DeltaTime(float time) {
" 0 1 (ws-butler-chg chg c-is-sws t fontified t face font-lock-type-face) 1 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 15 (ws-butler-chg chg fontified t face font-lock-constant-face) 15 17 (ws-butler-chg chg fontified t) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg delete fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t face font-lock-function-name-face) 21 30 (ws-butler-chg chg fontified t face font-lock-function-name-face) 30 31 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 31 36 (ws-butler-chg chg fontified t face font-lock-type-face) 36 37 (ws-butler-chg chg fontified t) 37 41 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 41 42 (ws-butler-chg chg fontified t) 42 45 (ws-butler-chg chg fontified t)) . 2946) (undo-tree-id321 . -21) (undo-tree-id322 . -31) (undo-tree-id323 . -42) (undo-tree-id324 . -21) (undo-tree-id325 . -45)) nil (25139 24705 393729 112000) 0 nil])
([nil nil ((#("  return time - previous_update_at;
" 0 1 (ws-butler-chg delete fontified t c-is-sws t c-in-sws t) 1 2 (ws-butler-chg chg fontified t c-is-sws t c-in-sws t) 2 3 (ws-butler-chg chg fontified t c-is-sws t face font-lock-keyword-face) 3 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 15 (ws-butler-chg chg fontified t) 15 16 (ws-butler-chg chg fontified t) 16 36 (ws-butler-chg chg fontified t)) . 2946) (undo-tree-id320 . -36)) nil (25139 24705 393709 512000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t c-is-sws t) 1 2 (ws-butler-chg chg fontified t)) . 2946) (undo-tree-id317 . -2) (undo-tree-id318 . -1) (undo-tree-id319 . -2)) nil (25139 24705 393691 612000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2905 . 2906) (nil fontified nil 2905 . 2906) (nil fontified nil 2904 . 2905) (nil fontified nil 2884 . 2904) (nil fontified nil 2883 . 2884) (nil fontified nil 2876 . 2883) (nil fontified nil 2871 . 2876) (nil fontified nil 2870 . 2871) (nil fontified nil 2869 . 2870) (nil fontified nil 2868 . 2869) (nil fontified nil 2865 . 2868) (nil fontified nil 2864 . 2865) (nil fontified nil 2860 . 2864) (nil fontified nil 2859 . 2860) (nil fontified nil 2854 . 2859) (nil fontified nil 2853 . 2854) (nil fontified nil 2844 . 2853) (nil fontified nil 2843 . 2844) (nil fontified nil 2842 . 2843) (nil fontified nil 2841 . 2842) (nil fontified nil 2840 . 2841) (nil fontified nil 2838 . 2840) (nil fontified nil 2829 . 2838) (nil fontified nil 2828 . 2829) (nil fontified nil 2827 . 2828) (nil fontified nil 2824 . 2827) (nil fontified nil 2823 . 2824) (2823 . 2906) (t 25139 24705 399423 134000)) nil (25139 24748 368101 927000) 0 nil])
([nil nil ((#("  return time - previous_update_at;
" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t face font-lock-keyword-face) 3 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 15 (ws-butler-chg chg fontified t) 15 16 (ws-butler-chg chg fontified t) 16 36 (ws-butler-chg chg fontified t)) . 2868)) nil (25139 24748 368082 526000) 0 nil])
([nil nil ((2711 . 2714)) nil (25139 24748 368070 126000) 0 nil])
([nil nil ((2712 . 2714) (#("    " 0 2 (ws-butler-chg chg fontified nil) 2 3 (ws-butler-chg chg fontified nil) 3 4 (ws-butler-chg chg fontified nil)) . 2712) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (nil rear-nonsticky nil 2749 . 2750) (nil fontified nil 2730 . 2750) (nil fontified nil 2729 . 2730) (nil fontified nil 2722 . 2729) (nil fontified nil 2717 . 2722) (nil fontified nil 2716 . 2717) (nil fontified nil 2715 . 2716) (nil fontified nil 2714 . 2715) (2714 . 2750)) nil (25139 24748 368056 926000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg delete fontified t c-type c-decl-id-start face font-lock-type-face)) . -2714) (undo-tree-id345 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -2715) (undo-tree-id346 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -2716) (undo-tree-id347 . -1) (#("u" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -2717) (undo-tree-id348 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -2718) (undo-tree-id349 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face font-lock-keyword-face)) . -2719) (undo-tree-id350 . -1) 2720) nil (25139 24748 368035 727000) 0 nil])
([nil nil ((2714 . 2726)) nil (25139 24748 368011 326000) 0 nil])
([nil nil ((#("  previous_update_at = time;
" 0 1 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 1 2 (c-is-sws t c-in-sws t ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t) 3 8 (ws-butler-chg chg fontified t) 8 22 (ws-butler-chg chg fontified t) 22 29 (ws-butler-chg chg fontified t)) . 2835) (undo-tree-id344 . -29)) nil (25139 24748 367998 726000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2782 . 2783) (nil fontified nil 2776 . 2783) (nil fontified nil 2762 . 2776) (nil fontified nil 2757 . 2762) (nil fontified nil 2756 . 2757) (nil fontified nil 2755 . 2756) (nil fontified nil 2754 . 2755) (2754 . 2783)) nil (25139 24748 367983 226000) 0 nil])
([nil nil ((#("  // required for computing DT inside the other methods
" 0 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 3 5 (ws-butler-chg chg c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 12 (ws-butler-chg chg c-in-sws t fontified t face font-lock-comment-face) 12 55 (ws-butler-chg chg c-in-sws t fontified t face font-lock-comment-face) 55 56 (ws-butler-chg chg c-in-sws t fontified t face font-lock-comment-face)) . 2808) (undo-tree-id339 . -56) (undo-tree-id340 . -56) (undo-tree-id341 . -56) (undo-tree-id342 . -56) (undo-tree-id343 . -56)) nil (25139 24748 367968 527000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -2807) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) 2808) nil (25139 24748 367949 426000) 0 nil])
([nil nil ((2807 . 2808)) nil (25139 24748 367926 226000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t rear-nonsticky t)) . -2782) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 2783) nil (25139 24748 367911 226000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 2644) (t 25139 24748 376088 168000)) nil (25139 24752 657918 179000) 0 nil])
([nil nil ((2808 . 2809)) nil (25139 24752 657902 179000) 0 nil])
([nil nil ((#("float StepMotor::get_DeltaTime(float time) {
" 0 1 (ws-butler-chg chg fontified t face font-lock-type-face) 1 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 15 (ws-butler-chg chg fontified t face font-lock-constant-face) 15 17 (ws-butler-chg chg fontified t) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t face font-lock-function-name-face) 21 30 (ws-butler-chg chg fontified t face font-lock-function-name-face) 30 31 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 31 36 (ws-butler-chg chg fontified t face font-lock-type-face) 36 37 (ws-butler-chg chg fontified t) 37 41 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 41 42 (ws-butler-chg chg fontified t) 42 45 (ws-butler-chg chg fontified t)) . 2809) (undo-tree-id357 . -31) (undo-tree-id358 . -42) (undo-tree-id359 . -45) (t 25139 24752 666088 6000)) nil (25139 24755 919764 270000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg rear-nonsticky t fontified t)) . 2809) (undo-tree-id355 . -1) (undo-tree-id356 . -2)) nil (25139 24755 919745 270000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 2809) (undo-tree-id354 . -1)) nil (25139 24755 919725 970000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2947) (t 25139 24755 926087 880000)) nil (25139 24769 680377 755000) 0 nil])
([nil nil ((2947 . 2948)) nil (25139 24769 680364 355000) 0 nil])
([nil nil ((2950 . 2951)) nil (25139 24769 680348 755000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2951)) nil (25139 24769 680336 255000) 0 nil])
([nil nil ((2951 . 2952)) nil (25139 24769 680323 555000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3017)) nil (25139 24769 680310 355000) 0 nil])
([nil nil ((3017 . 3018)) nil (25139 24769 680297 655000) 0 nil])
([nil nil ((3020 . 3021)) nil (25139 24769 680285 55000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3021)) nil (25139 24769 680271 455000) 0 nil])
([nil nil ((3021 . 3022)) nil (25139 24769 680255 355000) 0 nil])
([nil nil ((2951 . 2958) (t 25139 24769 689420 689000)) nil (25139 24774 582377 500000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2690) (t 25139 24774 589420 505000)) nil (25139 24781 274763 814000) 0 nil])
([nil nil ((2690 . 2691)) nil (25139 24781 274747 614000) 0 nil])
([nil nil ((#("void StepMotor::set_enable(bool v) {
" 0 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 16 (ws-butler-chg chg fontified t) 16 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg delete fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t face font-lock-function-name-face) 21 22 (ws-butler-chg delete fontified t face font-lock-function-name-face) 22 26 (ws-butler-chg chg fontified t face font-lock-function-name-face) 26 27 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 27 31 (ws-butler-chg chg fontified t face font-lock-type-face) 31 32 (ws-butler-chg chg fontified t) 32 33 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 33 34 (ws-butler-chg chg fontified t) 34 37 (ws-butler-chg chg fontified t)) . 3008) (t 25139 24781 282753 583000)) nil (25139 24842 291495 559000) 0 nil])
([nil nil ((#("  hal->SetEnable(v);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg fontified t)) . 3008)) nil (25139 24842 291482 859000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 3008)) nil (25139 24842 291470 559000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3067 . 3068) (nil fontified nil 3067 . 3068) (nil fontified nil 3066 . 3067) (nil fontified nil 3065 . 3066) (nil fontified nil 3047 . 3065) (nil fontified nil 3046 . 3047) (nil fontified nil 3045 . 3046) (nil fontified nil 3042 . 3045) (nil fontified nil 3041 . 3042) (nil fontified nil 3040 . 3041) (nil fontified nil 3039 . 3040) (nil fontified nil 3035 . 3039) (nil fontified nil 3034 . 3035) (nil fontified nil 3030 . 3034) (nil fontified nil 3029 . 3030) (nil fontified nil 3028 . 3029) (nil fontified nil 3027 . 3028) (nil fontified nil 3026 . 3027) (nil fontified nil 3025 . 3026) (nil fontified nil 3024 . 3025) (nil fontified nil 3022 . 3024) (nil fontified nil 3013 . 3022) (nil fontified nil 3012 . 3013) (nil fontified nil 3011 . 3012) (nil fontified nil 3008 . 3011) (3008 . 3068)) nil (25139 24842 291457 259000) 0 nil])
([nil nil ((3008 . 3009)) nil (25139 24842 291438 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3067 . 3068) (nil fontified nil 3067 . 3068) (nil fontified nil 3066 . 3067) (nil fontified nil 3065 . 3066) (nil fontified nil 3047 . 3065) (nil fontified nil 3046 . 3047) (nil fontified nil 3045 . 3046) (nil fontified nil 3042 . 3045) (nil fontified nil 3041 . 3042) (nil fontified nil 3040 . 3041) (nil fontified nil 3039 . 3040) (nil fontified nil 3035 . 3039) (nil fontified nil 3034 . 3035) (nil fontified nil 3030 . 3034) (nil fontified nil 3029 . 3030) (nil fontified nil 3028 . 3029) (nil fontified nil 3027 . 3028) (nil fontified nil 3026 . 3027) (nil fontified nil 3025 . 3026) (nil fontified nil 3024 . 3025) (nil fontified nil 3022 . 3024) (nil fontified nil 3013 . 3022) (nil fontified nil 3012 . 3013) (nil fontified nil 3011 . 3012) (nil fontified nil 3008 . 3011) (3008 . 3068)) nil (25139 24842 291424 959000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t rear-nonsticky t)) . -3067) (undo-tree-id365 . -1) 3068) nil (25139 24842 291406 59000) 0 nil])
([nil nil ((#("v" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -3008) (undo-tree-id361 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -3009) (undo-tree-id362 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -3010) (undo-tree-id363 . -1) (#("d" 0 1 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face)) . -3011) (undo-tree-id364 . -1) 3012) nil (25139 24842 291389 259000) 0 nil])
([nil nil ((3008 . 3012)) nil (25139 24842 291370 259000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -3024) (undo-tree-id360 . -1) 3025) nil (25139 24842 291357 259000) 0 nil])
([nil nil ((3024 . 3025)) nil (25139 24842 291330 659000) 0 nil])
([nil nil ((#("v" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 3035) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 3035) (#("l" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 3035) (#("o" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 3035) (#("o" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 3035) (#("b" 0 1 (ws-butler-chg chg fontified t face font-lock-type-face)) . 3035)) nil (25139 24842 291305 259000) 0 nil])
([nil nil ((3046 . 3050)) nil (25139 24842 291291 459000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg delete fontified t)) . 3050) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 3050) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 3050) (#("S" 0 1 (ws-butler-chg chg fontified t)) . 3050)) nil (25139 24842 291278 159000) 0 nil])
([nil nil ((3050 . 3051)) nil (25139 24842 291264 759000) 0 nil])
([nil nil ((#("v" 0 1 (ws-butler-chg chg fontified t)) . 3057)) nil (25139 24842 291251 659000) 0 nil])
([nil nil ((3041 . 3048)) nil (25139 24842 291235 559000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 3113) (t 25139 24842 302751 260000)) nil (25139 24850 332521 979000) 0 nil])
([nil nil ((3113 . 3114)) nil (25139 24850 332508 878000) 0 nil])
([nil nil ((3116 . 3117)) nil (25139 24850 332496 178000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t)) . 3117)) nil (25139 24850 332482 378000) 0 nil])
([nil nil ((3117 . 3118)) nil (25139 24850 332466 179000) 0 nil])
([nil nil ((#("bool is_moving_home() {
" 0 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 6 (ws-butler-chg chg fontified t face font-lock-function-name-face) 6 7 (ws-butler-chg delete fontified t face font-lock-function-name-face) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg chg fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg delete fontified t face font-lock-function-name-face) 10 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg chg fontified t face font-lock-function-name-face) 16 17 (ws-butler-chg delete fontified t face font-lock-function-name-face) 17 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 21 (ws-butler-chg chg fontified t) 21 24 (ws-butler-chg chg fontified t)) . 5119) (t 25139 24850 339417 622000)) nil (25139 24942 101947 589000) 0 nil])
([nil nil ((#("  return get_direction(m_target_velocity) == get_direction(m_config->homing_dir);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 28 (ws-butler-chg chg fontified t) 28 41 (ws-butler-chg chg fontified t) 41 80 (ws-butler-chg chg fontified t) 80 82 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101934 189000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101921 89000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 5119)) nil (25139 24942 101908 389000) 0 nil])
([nil nil ((#("void StepMotor::set_target_velocity(unit_t vel) {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 16 (ws-butler-chg chg fontified t) 16 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg delete fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t face font-lock-function-name-face) 21 22 (ws-butler-chg chg fontified t face font-lock-function-name-face) 22 23 (ws-butler-chg chg fontified t face font-lock-function-name-face) 23 24 (ws-butler-chg chg fontified t face font-lock-function-name-face) 24 25 (ws-butler-chg chg fontified t face font-lock-function-name-face) 25 26 (ws-butler-chg chg fontified t face font-lock-function-name-face) 26 27 (ws-butler-chg chg fontified t face font-lock-function-name-face) 27 28 (ws-butler-chg chg fontified t face font-lock-function-name-face) 28 29 (ws-butler-chg delete fontified t face font-lock-function-name-face) 29 35 (ws-butler-chg chg fontified t face font-lock-function-name-face) 35 36 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 36 42 (ws-butler-chg chg fontified t face font-lock-type-face) 42 43 (ws-butler-chg chg fontified t) 43 46 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 46 47 (ws-butler-chg chg fontified t) 47 50 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101895 489000) 0 nil])
([nil nil ((#("  target_velocity = vel;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 25 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101882 589000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 5119)) nil (25139 24942 101869 689000) 0 nil])
([nil nil ((#("  if (vel == 0)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 16 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101857 89000) 0 nil])
([nil nil ((#("    curent_velocity = 0;
" 0 1 (ws-butler-chg delete fontified t) 1 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t) 4 21 (ws-butler-chg chg fontified t) 21 25 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101844 189000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 5119)) nil (25139 24942 101831 289000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 5119)) nil (25139 24942 101818 289000) 0 nil])
([nil nil ((3130 . 3131)) nil (25139 24942 101805 389000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3359 . 3360) (nil fontified nil 3359 . 3360) (nil fontified nil 3358 . 3359) (nil fontified nil 3357 . 3358) (nil fontified nil 3353 . 3357) (nil fontified nil 3336 . 3353) (nil fontified nil 3335 . 3336) (nil fontified nil 3333 . 3335) (nil fontified nil 3332 . 3333) (nil fontified nil 3320 . 3332) (nil fontified nil 3318 . 3320) (nil fontified nil 3317 . 3318) (nil fontified nil 3316 . 3317) (nil fontified nil 3315 . 3316) (nil fontified nil 3292 . 3315) (nil fontified nil 3291 . 3292) (nil fontified nil 3290 . 3291) (nil fontified nil 3287 . 3290) (nil fontified nil 3286 . 3287) (nil fontified nil 3283 . 3286) (nil fontified nil 3282 . 3283) (nil fontified nil 3276 . 3282) (nil fontified nil 3275 . 3276) (nil fontified nil 3269 . 3275) (nil fontified nil 3268 . 3269) (nil fontified nil 3267 . 3268) (nil fontified nil 3266 . 3267) (nil fontified nil 3265 . 3266) (nil fontified nil 3264 . 3265) (nil fontified nil 3263 . 3264) (nil fontified nil 3262 . 3263) (nil fontified nil 3261 . 3262) (nil fontified nil 3260 . 3261) (nil fontified nil 3259 . 3260) (nil fontified nil 3258 . 3259) (nil fontified nil 3257 . 3258) (nil fontified nil 3256 . 3257) (nil fontified nil 3254 . 3256) (nil fontified nil 3245 . 3254) (nil fontified nil 3244 . 3245) (nil fontified nil 3243 . 3244) (nil fontified nil 3241 . 3243) (nil fontified nil 3240 . 3241) (nil fontified nil 3239 . 3240) (nil fontified nil 3238 . 3239) (nil fontified nil 3237 . 3238) (nil fontified nil 3235 . 3237) (nil fontified nil 3196 . 3235) (nil fontified nil 3183 . 3196) (nil fontified nil 3163 . 3183) (nil fontified nil 3157 . 3163) (nil fontified nil 3156 . 3157) (nil fontified nil 3155 . 3156) (nil fontified nil 3152 . 3155) (nil fontified nil 3150 . 3152) (nil fontified nil 3148 . 3150) (nil fontified nil 3147 . 3148) (nil fontified nil 3146 . 3147) (nil fontified nil 3145 . 3146) (nil fontified nil 3141 . 3145) (nil fontified nil 3140 . 3141) (nil fontified nil 3139 . 3140) (nil fontified nil 3138 . 3139) (nil fontified nil 3137 . 3138) (nil fontified nil 3136 . 3137) (nil fontified nil 3135 . 3136) (nil fontified nil 3134 . 3135) (nil fontified nil 3131 . 3134) (3131 . 3360)) nil (25139 24942 101789 889000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg)) . 3130) (undo-tree-id381 . -1)) nil (25139 24942 101759 689000) 0 nil])
([nil nil ((#("  if (vel == 0)
" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 16 (ws-butler-chg chg fontified t)) . 3315)) nil (25139 24942 101744 289000) 0 nil])
([nil nil ((#("    curent_velocity = 0;
" 0 1 (ws-butler-chg delete fontified t) 1 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t) 4 21 (ws-butler-chg chg fontified t) 21 25 (ws-butler-chg chg fontified t)) . 3315)) nil (25139 24942 101731 389000) 0 nil])
([nil nil ((3005 . 3008)) nil (25139 24942 101718 689000) 0 nil])
([nil nil ((3006 . 3008) (#("    " 0 2 (ws-butler-chg chg fontified nil) 2 3 (ws-butler-chg chg fontified nil) 3 4 (ws-butler-chg chg fontified nil)) . 3006) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (nil rear-nonsticky nil 3048 . 3049) (nil fontified nil 3045 . 3049) (nil fontified nil 3028 . 3045) (nil fontified nil 3027 . 3028) (nil fontified nil 3025 . 3027) (nil fontified nil 3024 . 3025) (nil fontified nil 3012 . 3024) (nil fontified nil 3010 . 3012) (nil fontified nil 3009 . 3010) (nil fontified nil 3008 . 3009) (3008 . 3049)) nil (25139 24942 101704 889000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t rear-nonsticky t)) . -3046) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 3047) nil (25139 24942 101683 989000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 3026) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 3026) (#("n" 0 1 (ws-butler-chg delete fontified t)) . 3026) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 3026) (#("r" 0 1 (ws-butler-chg delete fontified t)) . 3026) (#("u" 0 1 (ws-butler-chg delete fontified t)) . 3026) (#("c" 0 1 (ws-butler-chg chg fontified t)) . 3026)) nil (25139 24942 101665 589000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 3272) (undo-tree-id374 . -1) (undo-tree-id375 . -1)) nil (25139 24942 101650 889000) 0 nil])
([nil nil ((#("void StepMotor::set_target_velocity(unit_t vel) {
" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face) 1 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t) 5 14 (ws-butler-chg chg fontified t face font-lock-constant-face) 14 16 (ws-butler-chg chg fontified t) 16 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t face font-lock-function-name-face) 21 22 (ws-butler-chg chg fontified t face font-lock-function-name-face) 22 23 (ws-butler-chg chg fontified t face font-lock-function-name-face) 23 24 (ws-butler-chg chg fontified t face font-lock-function-name-face) 24 25 (ws-butler-chg chg fontified t face font-lock-function-name-face) 25 26 (ws-butler-chg chg fontified t face font-lock-function-name-face) 26 27 (ws-butler-chg chg fontified t face font-lock-function-name-face) 27 28 (ws-butler-chg chg fontified t face font-lock-function-name-face) 28 29 (ws-butler-chg chg fontified t face font-lock-function-name-face) 29 35 (ws-butler-chg chg fontified t face font-lock-function-name-face) 35 36 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 36 42 (ws-butler-chg chg fontified t face font-lock-type-face) 42 43 (ws-butler-chg chg fontified t) 43 46 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 46 47 (ws-butler-chg chg fontified t) 47 50 (ws-butler-chg chg fontified t)) . 3272) (undo-tree-id371 . -36) (undo-tree-id372 . -47) (undo-tree-id373 . -50)) nil (25139 24942 101633 689000) 0 nil])
([nil nil ((#("  target_velocity = vel;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 25 (ws-butler-chg chg fontified t)) . 3272) (undo-tree-id370 . -25)) nil (25139 24942 101615 689000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 3272) (undo-tree-id369 . -1)) nil (25139 24942 101599 789000) 0 nil])
([nil nil ((#("}
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t)) . 3272) (undo-tree-id367 . -1) (undo-tree-id368 . -2)) nil (25139 24942 101583 589000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete rear-nonsticky t fontified t)) . 3272) (undo-tree-id366 . -1)) nil (25139 24942 101564 89000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t)) . 7447) (t 25139 24942 109414 134000)) nil (25139 25386 886817 294000) 0 nil])
([nil nil ((7447 . 7448)) nil (25139 25386 886804 494000) 0 nil])
([nil nil ((7451 . 7452)) nil (25139 25386 886791 694000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 7452)) nil (25139 25386 886772 494000) 0 nil])
([nil nil ((7452 . 7453)) nil (25139 25386 886760 94000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg delete fontified t)) . 7454) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7454) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7454) (#("S" 0 1 (ws-butler-chg chg fontified t)) . 7454)) nil (25139 25386 886743 394000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 581) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 581) (t 25139 25386 896063 884000)) nil (25139 26542 151492 565000) 0 nil])
([nil nil ((552 . 556) (t 25139 26542 166019 937000)) nil (25139 26573 847981 762000) 0 nil])
([nil nil ((556 . 557)) nil (25139 26573 847968 762000) 0 nil])
([nil nil ((#("," 0 1 (ws-butler-chg chg fontified t)) . -556) (undo-tree-id382 . -1) 557) nil (25139 26573 847954 462000) 0 nil])
([nil nil ((556 . 557)) nil (25139 26573 847918 862000) 0 nil])
([nil nil ((574 . 579)) nil (25139 26573 847904 762000) 0 nil])
([nil nil ((597 . 602)) nil (25139 26573 847889 63000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 618) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 618) (t 25139 26573 856018 725000)) nil (25139 26576 545178 371000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 881) (t 25139 26576 556018 624000)) nil (25139 27487 473070 965000) 0 nil])
([nil nil ((881 . 882)) nil (25139 27487 473058 165000) 0 nil])
([nil nil ((884 . 892)) nil (25139 27487 473045 365000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t)) . 892)) nil (25139 27487 473032 166000) 0 nil])
([nil nil ((892 . 893)) nil (25139 27487 473016 65000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 901) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 901) (t 25139 27487 489317 355000)) nil (25139 27489 650511 396000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 1232) (t 25139 27489 659317 273000)) nil (25139 27504 938605 909000) 0 nil])
([nil nil ((1232 . 1233)) nil (25139 27504 938593 210000) 0 nil])
([nil nil ((1235 . 1244)) nil (25139 27504 938580 409000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t)) . 1244)) nil (25139 27504 938563 109000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 1094) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 1094) (t 25139 27504 949316 688000)) nil (25139 27511 648502 427000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 982) (t 25139 27511 655983 100000)) nil (25139 27526 331581 351000) 0 nil])
([nil nil ((982 . 983)) nil (25139 27526 331568 751000) 0 nil])
([nil nil ((985 . 992)) nil (25139 27526 331555 851000) 0 nil])
([nil nil ((992 . 993)) nil (25139 27526 331543 351000) 0 nil])
([nil nil ((#("+" 0 1 (ws-butler-chg chg fontified t)) . -992) (undo-tree-id383 . -1) 993) nil (25139 27526 331530 51000) 0 nil])
([nil nil ((992 . 993)) nil (25139 27526 331506 851000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg delete fontified t)) . 993)) nil (25139 27526 331493 951000) 0 nil])
([nil nil ((993 . 994)) nil (25139 27526 331481 51000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 1003) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 1003)) nil (25139 27526 331464 51000) 0 nil])
([nil nil ((944 . 950) (t 25139 27526 339315 874000)) nil (25139 27553 841234 826000) 0 nil])
([nil nil ((950 . 951)) nil (25139 27553 841221 826000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 951) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 951) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 951) (#("g" 0 1 (ws-butler-chg delete fontified t)) . 951) (#("r" 0 1 (ws-butler-chg delete fontified t)) . 951) (#("a" 0 1 (ws-butler-chg delete fontified t)) . 951) (#("t" 0 1 (ws-butler-chg chg fontified t)) . 951)) nil (25139 27553 841207 427000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg delete fontified t)) . 959) (undo-tree-id384 . -1) (#("p" 0 1 (ws-butler-chg delete fontified t)) . 959) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 959) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 959) (#("s" 0 1 (ws-butler-chg delete fontified t)) . 959) (#("_" 0 1 (ws-butler-chg chg fontified t)) . 959)) nil (25139 27553 841189 427000) 0 nil])
([nil nil ((#("m" 0 1 (ws-butler-chg chg fontified t)) . -781) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -782) (undo-tree-id390 . -1) (undo-tree-id391 . -1) 783 (t 25139 27553 852648 167000)) nil (25139 27561 565489 896000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 1146) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 1146) (t 25139 27561 572647 872000)) nil (25139 27563 844559 140000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 1183) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 1183) (t 25139 27563 855981 118000)) nil (25139 27566 813652 86000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1131) (t 25139 27566 822647 668000)) nil (25139 27588 223506 733000) 0 nil])
([nil nil ((1131 . 1132)) nil (25139 27588 223494 333000) 0 nil])
([nil nil ((#("O" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 764)) nil (25139 27588 223482 33000) 0 nil])
([nil nil ((764 . 765)) nil (25139 27588 223469 833000) 0 nil])
([nil nil ((766 . 767)) nil (25139 27588 223457 533000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 767)) nil (25139 27588 223444 833000) 0 nil])
([nil nil ((767 . 768)) nil (25139 27588 223432 333000) 0 nil])
([nil nil ((654 . 655)) nil (25139 27588 223420 33000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 655)) nil (25139 27588 223407 433000) 0 nil])
([nil nil ((655 . 656)) nil (25139 27588 223395 133000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 650)) nil (25139 27588 223381 433000) 0 nil])
([nil nil ((650 . 651)) nil (25139 27588 223365 433000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t)) . 1600) (t 25139 27588 232646 856000)) nil (25139 27611 584822 775000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t)) . 1623) (t 25139 27611 595979 302000)) nil (25139 27614 952162 686000) 0 nil])
([nil nil ((1623 . 1624)) nil (25139 27614 952145 986000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 1836) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 1836) (t 25139 27614 959312 508000)) nil (25139 27643 751721 151000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 1848) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 1848)) nil (25139 27643 751688 551000) 0 nil])
([nil nil ((#("m" 0 1 (ws-butler-chg chg fontified t)) . -1975) (undo-tree-id392 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -1976) (undo-tree-id393 . -1) 1977) nil (25139 27643 751674 451000) 0 nil])
([nil nil ((#("A" 0 1 (ws-butler-chg chg fontified t)) . 2170)) nil (25139 27643 751648 651000) 0 nil])
([nil nil ((2170 . 2171)) nil (25139 27643 751635 751000) 0 nil])
([nil nil ((#("A" 0 1 (ws-butler-chg chg fontified t)) . 2196)) nil (25139 27643 751622 351000) 0 nil])
([nil nil ((2196 . 2197)) nil (25139 27643 751606 151000) 0 nil])
([nil nil ((2097 . 2100) (t 25139 27643 759311 413000)) nil (25139 27652 602802 591000) 0 nil])
([nil nil ((2100 . 2101)) nil (25139 27652 602789 490000) 0 nil])
([nil nil ((2101 . 2102)) nil (25139 27652 605268 391000) 0 nil])
([nil nil ((2657 . 2660)) nil (25139 27658 635531 905000) 0 nil] [nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face c-in-sws t)) . 2102) (#("  " 0 2 (ws-butler-chg chg fontified t c-in-sws t)) . -2103) 2102) ((2103 . 2105) (nil ws-butler-chg delete 2103 . 2104) (2102 . 2103)) (25139 27652 602759 890000) 0 nil])
([nil nil ((2660 . 2661)) nil (25139 27658 635518 605000) 0 nil])
nil
([nil nil ((2661 . 2662)) nil (25139 27658 635501 505000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t)) . 2806) (t 25139 27658 649310 846000)) nil (25139 27671 117763 392000) 0 nil])
([nil nil ((2806 . 2807)) nil (25139 27671 117750 392000) 0 nil])
([nil nil ((2812 . 2813)) nil (25139 27671 117737 692000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t)) . 2813)) nil (25139 27671 117724 592000) 0 nil])
([nil nil ((2813 . 2814)) nil (25139 27671 117708 292000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 3234) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 3234) (t 25139 27671 125977 32000)) nil (25139 27700 262186 210000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 3268) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 3268)) nil (25139 27700 262169 110000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 4034) (t 25139 27700 272642 593000)) nil (25139 27727 365349 216000) 0 nil])
([nil nil ((#("  float dt = GetDeltaTime(time);
" 0 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 10 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 10 27 (ws-butler-chg chg fontified t) 27 31 (ws-butler-chg chg fontified t) 31 33 (ws-butler-chg chg fontified t)) . 4153) (t 25139 27727 375974 893000)) nil (25139 27740 457004 501000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t)) . -4346) (undo-tree-id394 . -1) 4347) nil (25139 27740 456990 301000) 0 nil])
([nil nil ((4346 . 4355)) nil (25139 27740 456958 901000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 4556) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 4556) (t 25139 27740 469307 729000)) nil (25139 27902 595187 179000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 4669) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 4669)) nil (25139 27902 595173 579000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 4681) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 4681)) nil (25139 27902 595160 279000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 4723) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 4723)) nil (25139 27902 595146 979000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 4785) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 4785)) nil (25139 27902 595133 879000) 0 nil])
([nil nil ((4838 . 4845)) nil (25139 27902 595120 779000) 0 nil])
([nil nil ((4845 . 4846)) nil (25139 27902 595108 179000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t)) . 4846)) nil (25139 27902 595095 179000) 0 nil])
([nil nil ((4846 . 4847)) nil (25139 27902 595082 279000) 0 nil])
([nil nil ((4851 . 4854)) nil (25139 27902 595069 479000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 4854)) nil (25139 27902 595056 779000) 0 nil])
([nil nil ((4854 . 4855)) nil (25139 27902 595043 979000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg delete fontified t)) . 4855) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 4855)) nil (25139 27902 595030 979000) 0 nil])
([nil nil ((4855 . 4856)) nil (25139 27902 595018 179000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 4861) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 4861)) nil (25139 27902 595005 279000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 5167) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 5167)) nil (25139 27902 594991 779000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 5207) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 5207)) nil (25139 27902 594966 779000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 5669)) nil (25139 27902 594953 879000) 0 nil])
([nil nil ((5669 . 5670)) nil (25139 27902 594941 79000) 0 nil])
([nil nil ((5672 . 5673)) nil (25139 27902 594928 479000) 0 nil])
([nil nil ((#("D" 0 1 (ws-butler-chg chg fontified t)) . 5673)) nil (25139 27902 594915 779000) 0 nil])
([nil nil ((5673 . 5674)) nil (25139 27902 594903 179000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 5698)) nil (25139 27902 594890 579000) 0 nil])
([nil nil ((5698 . 5699)) nil (25139 27902 594878 79000) 0 nil])
([nil nil ((5701 . 5702)) nil (25139 27902 594865 479000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t)) . 5669)) nil (25139 27902 594852 779000) 0 nil])
([nil nil ((5669 . 5670)) nil (25139 27902 594840 279000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg delete fontified t)) . 5683) (#("i" 0 1 (ws-butler-chg delete fontified t)) . 5683) (#("d" 0 1 (ws-butler-chg chg fontified t)) . 5683)) nil (25139 27902 594827 79000) 0 nil])
([nil nil ((#("D" 0 1 (ws-butler-chg chg fontified t)) . -5699) (undo-tree-id397 . -1) 5700) nil (25139 27902 594813 479000) 0 nil])
([nil nil ((5699 . 5700)) nil (25139 27902 594797 679000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 5794)) nil (25139 27902 594785 179000) 0 nil])
([nil nil ((5794 . 5795)) nil (25139 27902 594772 779000) 0 nil])
([nil nil ((5797 . 5798)) nil (25139 27902 594760 79000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 5798)) nil (25139 27902 594747 279000) 0 nil])
([nil nil ((5798 . 5799)) nil (25139 27902 594734 579000) 0 nil])
([nil nil ((5867 . 5869)) nil (25139 27902 594722 79000) 0 nil])
([nil nil ((#("+" 0 1 (ws-butler-chg chg fontified t)) . -5867) (undo-tree-id395 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -5868) (undo-tree-id396 . -1) 5869) nil (25139 27902 594708 579000) 0 nil])
([nil nil ((5867 . 5869)) nil (25139 27902 594683 779000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg delete fontified t)) . 5869)) nil (25139 27902 594671 79000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 5864)) nil (25139 27902 594657 879000) 0 nil])
([nil nil ((5864 . 5865)) nil (25139 27902 594645 279000) 0 nil])
([nil nil ((#("_" 0 1 (ws-butler-chg delete fontified t)) . 5954) (#("m" 0 1 (ws-butler-chg chg fontified t)) . 5954)) nil (25139 27902 594631 579000) 0 nil])
([nil nil ((5976 . 5977)) nil (25139 27902 594618 479000) 0 nil])
([nil nil ((#("O" 0 1 (ws-butler-chg chg fontified t)) . 5977)) nil (25139 27902 594605 179000) 0 nil])
([nil nil ((5978 . 5980)) nil (25139 27902 594592 579000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 5980)) nil (25139 27902 594579 679000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 6031)) nil (25139 27902 594567 79000) 0 nil])
([nil nil ((6031 . 6032)) nil (25139 27902 594554 279000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t)) . 6003)) nil (25139 27902 594541 679000) 0 nil])
([nil nil ((6003 . 6004)) nil (25139 27902 594529 79000) 0 nil])
([nil nil ((6006 . 6008)) nil (25139 27902 594516 179000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t)) . 6008)) nil (25139 27902 594499 179000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t)) . 6411) (t 25139 27902 605968 236000)) nil (25139 29441 914539 792000) 0 nil])
([nil nil ((6411 . 6412)) nil (25139 29441 914526 492000) 0 nil])
([nil nil ((6415 . 6416)) nil (25139 29441 914513 492000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 6416)) nil (25139 29441 914494 992000) 0 nil])
([nil nil ((6416 . 6417)) nil (25139 29441 914479 692000) 0 nil])
([nil nil ((6546 . 6548)) nil (25139 29441 914466 492000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 6548)) nil (25139 29441 914453 92000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t)) . 6542)) nil (25139 29441 914428 192000) 0 nil])
([nil nil ((6542 . 6543)) nil (25139 29441 914410 992000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t)) . -6144) (undo-tree-id398 . -1) 6145 (t 25139 29441 925909 722000)) nil (25139 29452 497785 895000) 0 nil])
([nil nil ((6144 . 6145)) nil (25139 29452 497757 995000) 0 nil])
([nil nil ((6849 . 6856) (t 25139 29452 509242 652000)) nil (25139 29477 197485 144000) 0 nil])
([nil nil ((6856 . 6857)) nil (25139 29477 197472 244000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t)) . 6857)) nil (25139 29477 197459 444000) 0 nil])
([nil nil ((6857 . 6858)) nil (25139 29477 197446 944000) 0 nil])
([nil nil ((6862 . 6865)) nil (25139 29477 197434 444000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg delete fontified t)) . 6865) (#("o" 0 1 (ws-butler-chg delete fontified t)) . 6865) (#("T" 0 1 (ws-butler-chg chg fontified t)) . 6865)) nil (25139 29477 197420 144000) 0 nil])
([nil nil ((6865 . 6867)) nil (25139 29477 197402 344000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t)) . 7011) (t 25139 29477 205908 384000)) nil (25139 29511 508042 432000) 0 nil])
([nil nil ((7011 . 7012)) nil (25139 29511 508029 932000) 0 nil])
([nil nil ((7015 . 7016)) nil (25139 29511 508017 532000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 7016)) nil (25139 29511 508004 832000) 0 nil])
([nil nil ((7016 . 7017)) nil (25139 29511 507992 532000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg delete fontified t)) . 7018) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7018) (#("t" 0 1 (ws-butler-chg delete fontified t)) . 7018) (#("S" 0 1 (ws-butler-chg chg fontified t)) . 7018)) nil (25139 29511 507979 132000) 0 nil])
([nil nil ((#("p" 0 1 (ws-butler-chg delete fontified t)) . 7231) (#("e" 0 1 (ws-butler-chg delete fontified t)) . 7231) (#("t" 0 1 (ws-butler-chg chg fontified t)) . 7231)) nil (25139 29511 507965 332000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . -7230) (undo-tree-id402 . -1) 7231) nil (25139 29511 507951 632000) 0 nil])
([nil nil ((7228 . 7229)) nil (25139 29511 507935 332000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 7229)) nil (25139 29511 507922 732000) 0 nil])
([nil nil ((7229 . 7230)) nil (25139 29511 507910 32000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t)) . 7224)) nil (25139 29511 507891 832000) 0 nil])
([nil nil ((7224 . 7225)) nil (25139 29511 507879 532000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t)) . 7661)) nil (25139 29511 507867 32000) 0 nil])
([nil nil ((7661 . 7662)) nil (25139 29511 507854 832000) 0 nil])
([nil nil ((7665 . 7667)) nil (25139 29511 507842 432000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t)) . 7667)) nil (25139 29511 507829 732000) 0 nil])
([nil nil ((7668 . 7671)) nil (25139 29511 507817 232000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t)) . 7671)) nil (25139 29511 507804 432000) 0 nil])
([nil nil ((#("d" 0 1 (ws-butler-chg chg fontified t)) . 7670) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1)) nil (25139 29511 507789 732000) 0 nil])
([nil nil ((3187 . 3188) (t 25139 29511 515907 69000)) nil (25139 29585 994122 211000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified nil)) . 3187) (nil fontified nil 3208 . 3209) (nil fontified nil 3207 . 3208) (nil fontified nil 3206 . 3207) (nil fontified nil 3205 . 3206) (nil fontified nil 3204 . 3205) (nil fontified nil 3203 . 3204) (nil fontified nil 3202 . 3203) (nil fontified nil 3201 . 3202) (nil fontified nil 3200 . 3201) (nil fontified nil 3199 . 3200) (nil fontified nil 3198 . 3199) (nil fontified nil 3197 . 3198) (nil fontified nil 3196 . 3197) (nil fontified nil 3195 . 3196) (nil fontified nil 3194 . 3195) (nil fontified nil 3193 . 3194) (nil fontified nil 3192 . 3193) (nil fontified nil 3191 . 3192) (nil fontified nil 3190 . 3191) (nil fontified nil 3189 . 3190) (nil fontified nil 3187 . 3189) (3187 . 3209)) nil (25139 29585 994108 311000) 0 nil])
([nil nil ((3192 . 3201)) nil (25139 29585 994090 611000) 0 nil])
([nil nil ((3201 . 3203)) nil (25139 29585 994078 211000) 0 nil])
([nil nil ((3224 . 3233)) nil (25139 29585 994064 811000) 0 nil])
([nil nil ((3233 . 3235)) nil (25139 29585 993850 11000) 0 nil])
([nil nil ((#(";" 0 1 (ws-butler-chg chg fontified t)) . -3216) (undo-tree-id411 . -1) 3217) nil (25139 29585 993833 711000) 0 nil])
([nil nil ((3216 . 3219)) nil (25139 29585 993817 611000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified nil)) . 3217) (undo-tree-id410 . -2) (3219 . 3220)) nil (25139 29585 993804 811000) 0 nil])
([nil nil ((3218 . 3221)) nil (25139 29585 993789 211000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified nil)) . 3219) (undo-tree-id409 . -2) (3221 . 3222)) nil (25139 29585 993776 511000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -3216) (undo-tree-id408 . -1) 3217) nil (25139 29585 993760 611000) 0 nil])
([nil nil ((3216 . 3217)) nil (25139 29585 993745 211000) 0 nil])
([nil nil ((3218 . 3221)) nil (25139 29585 993732 911000) 0 nil])
([nil nil ((3221 . 3230)) nil (25139 29585 993720 511000) 0 nil])
([nil nil ((#("g" 0 1 (ws-butler-chg chg fontified t)) . -3228) (undo-tree-id406 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -3229) (undo-tree-id407 . -1) 3230) nil (25139 29585 993707 11000) 0 nil])
([nil nil ((3228 . 3230)) nil (25139 29585 993684 511000) 0 nil])
([nil nil ((3230 . 3232)) nil (25139 29585 993672 311000) 0 nil])
([nil nil ((3232 . 3233)) nil (25139 29585 993660 111000) 0 nil])
([nil nil ((3233 . 3235)) nil (25139 29585 993647 811000) 0 nil])
([nil nil ((#("h" 0 1 (ws-butler-chg chg fontified t)) . -3233) (undo-tree-id404 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -3234) (undo-tree-id405 . -1) 3235) nil (25139 29585 993634 911000) 0 nil])
([nil nil ((3233 . 3237)) nil (25139 29585 993617 211000) 0 nil])
([nil nil ((3233 . 3245) (#("get_" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t)) . -3233) (undo-tree-id403 . -4) 3237) nil (25139 29585 993603 711000) 0 nil])
([nil nil ((3245 . 3247)) nil (25139 29585 993578 711000) 0 nil])
([nil nil ((3247 . 3248)) nil (25139 29585 993562 411000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -3210) (undo-tree-id412 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -3211) (undo-tree-id413 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -3212) (undo-tree-id414 . -1) (#("p" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -3213) (undo-tree-id415 . -1) 3214 (t 25139 29586 5904 226000)) nil (25139 29590 186172 448000) 0 nil])
([nil nil ((3210 . 3215)) nil (25139 29590 186141 649000) 0 nil])
([nil nil ((2705 . 2709) (t 25139 29590 195904 69000)) nil (25139 30214 130040 251000) 0 nil])
([nil nil ((2048 . 2052)) nil (25139 30214 130027 151000) 0 nil])
([nil nil ((1490 . 1494)) nil (25139 30214 130014 251000) 0 nil])
([nil nil ((1444 . 1448)) nil (25139 30214 130001 151000) 0 nil])
([nil nil ((1437 . 1441)) nil (25139 30214 129983 451000) 0 nil])
([nil nil ((nil ws-butler-chg chg 8026 . 8031) (nil face font-lock-type-face 8026 . 8031) (#("Motor*" 0 5 (ws-butler-chg chg face font-lock-type-face) 5 6 (ws-butler-chg chg)) . -8022) (8028 . 8038) (nil ws-butler-chg chg 6232 . 6237) (t 25139 30214 145880 383000) (nil face font-lock-type-face 6232 . 6237) (t 25139 30214 145880 383000) (#("Motor*" 0 5 (ws-butler-chg chg face font-lock-type-face) 5 6 (ws-butler-chg chg)) . -6228) (t 25139 30214 145880 383000) (6234 . 6244) 911 (t 25139 30214 145880 383000)) nil (25139 30238 318466 822000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 8072) (t 25139 30238 332546 136000)) nil (25139 30547 511705 987000) 0 nil])
([nil nil ((8072 . 8073)) nil (25139 30547 511692 887000) 0 nil])
([nil nil ((8076 . 8077)) nil (25139 30547 511679 787000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 8077)) nil (25139 30547 511665 987000) 0 nil])
([nil nil ((8077 . 8078)) nil (25139 30547 511652 687000) 0 nil])
([nil nil ((8079 . 8080)) nil (25139 30547 511639 387000) 0 nil])
([nil nil ((#("H" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 8080)) nil (25139 30547 511625 787000) 0 nil])
([nil current ((8080 . 8081)) nil (25139 30547 511609 587000) 0 nil])
nil
