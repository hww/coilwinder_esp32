(undo-tree-save-format-version . 1)
"7f112e88f6900877c62f1ee61331be6796b6bb76"
[nil nil nil nil (25139 14193 37477 473000) 0 nil]
([nil nil ((824 . 3839) (#("
{
        public:
                /** GPIO settings */
                gpio_num_t step_pin;
                gpio_num_t dir_pin;
                gpio_num_t enable_pin;
                gpio_num_t endstop_pin;
                bool dir_pin_reverse;
                bool step_pin_reverse;
                bool enable_pin_reverse;
                bool endstop_pin_reverse;

                /** Kinematic settings */
                float max_velocity;
                float max_accel;
                float rotation_distance;
                int microsteps;
                int steps_per_turn;
                float position_min;
                float position_endstop;
                float position_max;

                /** Homing settings */
                float homing_speed;
                float homing_retract_dist;
                float second_homing_speed;
                bool homing_dir_reverse;

                /** Config */
                double distance_per_step;
                int microsteps_per_turn;

                StepMotorConfig();

                void Init();
                unit_t StepsToUnits(step_t steps);
                step_t UnitsToSteps(unit_t units)

                /** Convert steps quantity to the real units */
                inline unit_t Motor::StepsToUnits(unit_t steps)
                {
                        float rotations = (float)steps / (float)microsteps_per_turn;
                        return rotations * rotation_distance;
                }

                /** Convert steps quantity to the real units */
                inline step_t Motor::UnitsToSteps(unit_t units)
                {
                        float rotations = (float)units / rotation_distance;
                        return (step_t)(rotations * microsteps_per_turn);
                }

};

class StepMotorHAL {
        public:
                int m_id;
                StepMotorConfig* m_config;

        public:
                StepMotor();

                void Init(int id, StepMotorConfig* cfg);
                void SetEnable(bool);
                bool GetEnable();
                void SetDirecton(bool);
                bool GetDirecton();
                void SetStep(bool);
                bool GetEndpoint();
};


class StepMotorAgent
{
        public:
                int m_id;
                StepMotor* m_motor;
                StepStepMotorConfig* m_config;
                bool m_moving;
                step_t m_target;
                unit_t m_velocity;

                StepMotorAgent();
                void Init(StepMotor* motor);
                void MoveTo(stepo_t pos, unit_t velocity)
                void Stop();
                void OnStep();
        private:
                void UpdateTarget();
};

class StepMotor  {
        public:
                /** The motor's ID */
                int id;

                /** The hgardware abstraction layer */
                StepMotorHAL m_hal;
                StepMotorAgent m_agent;

                /** Control containes requested state */
                unit_t m_target_velocity;
                bool m_enabled;

                /** Status display the actual state of motor */
                unit_t m_velocity;
                step_t m_position;

                /** System */
                int m_log;
                uint32_t m_isr_count;
                esp_timer_handle_t m_timer_handle;
                esp_timer_create_args_t m_timer_arg;
                float m_previous_update_at;
                uint64_t m_timer_interval_us;

                /** Threads */
                TaskHandle_t m_homing_task_handle;


                Motor();

                void Init(StepMotorConfig* conf);
                void InitMenu(Menu* menu, std::string name);
                void Update(float time);

                void SetVelocity(unit_t vel);
                void SetEnable(bool v) { m_hal->SetEnable(v); }


                void UpdateVelocity(float time);
                void UpdateMovingToTarget();
                void UpdateStepMotor();
                void UpdateEndpoint();
                /** Convert units to steps and reversed*/
                int UnitsToSteps(float units);
                float StepsToUnits(int steps);
                bool VerifyTimerInterval(uint64_t& interval);

                void MoveTo(float position);
                void MoveTo(float position, float velocity);
                void MoveToHome();
                void HomingTask();


        private:
                void Isr();
              " 0 11 (fontified t) 11 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t c-type c-decl-end) 18 19 (fontified t) 19 35 (fontified t c-in-sws t c-is-sws t) 35 36 (fontified t face font-lock-doc-face c-in-sws t c-is-sws t) 36 39 (fontified t face font-lock-doc-face c-in-sws t) 39 52 (fontified t face font-lock-doc-face c-in-sws t) 52 55 (fontified t face font-lock-doc-face c-in-sws t) 55 56 (fontified t c-in-sws t) 56 72 (fontified t c-is-sws t c-in-sws t) 72 73 (fontified t c-is-sws t face font-lock-type-face) 73 81 (fontified t face font-lock-type-face) 81 82 (fontified t c-type c-decl-id-start face font-lock-type-face) 82 83 (fontified t) 83 91 (fontified t face font-lock-variable-name-face) 91 109 (fontified t) 109 118 (fontified t face font-lock-type-face) 118 119 (fontified t c-type c-decl-id-start face font-lock-type-face) 119 120 (fontified t) 120 127 (fontified t face font-lock-variable-name-face) 127 145 (fontified t) 145 154 (fontified t face font-lock-type-face) 154 155 (fontified t c-type c-decl-id-start face font-lock-type-face) 155 156 (fontified t) 156 166 (fontified t face font-lock-variable-name-face) 166 184 (fontified t) 184 193 (fontified t face font-lock-type-face) 193 194 (fontified t c-type c-decl-id-start face font-lock-type-face) 194 195 (fontified t) 195 206 (fontified t face font-lock-variable-name-face) 206 208 (fontified t) 208 224 (fontified t) 224 227 (fontified t face font-lock-type-face) 227 228 (fontified t c-type c-decl-id-start face font-lock-type-face) 228 229 (fontified t) 229 244 (fontified t face font-lock-variable-name-face) 244 262 (fontified t) 262 265 (fontified t face font-lock-type-face) 265 266 (fontified t c-type c-decl-id-start face font-lock-type-face) 266 267 (fontified t) 267 283 (fontified t face font-lock-variable-name-face) 283 301 (fontified t) 301 304 (fontified t face font-lock-type-face) 304 305 (fontified t c-type c-decl-id-start face font-lock-type-face) 305 306 (fontified t) 306 324 (fontified t face font-lock-variable-name-face) 324 342 (fontified t) 342 345 (fontified t face font-lock-type-face) 345 346 (fontified t c-type c-decl-id-start face font-lock-type-face) 346 347 (fontified t) 347 366 (fontified t face font-lock-variable-name-face) 366 369 (fontified t) 369 385 (fontified t c-in-sws t c-is-sws t) 385 386 (fontified t face font-lock-doc-face c-in-sws t c-is-sws t) 386 389 (fontified t face font-lock-doc-face c-in-sws t) 389 407 (fontified t face font-lock-doc-face c-in-sws t) 407 410 (fontified t face font-lock-doc-face c-in-sws t) 410 411 (fontified t c-in-sws t) 411 427 (fontified t c-is-sws t c-in-sws t) 427 428 (fontified t c-is-sws t face font-lock-type-face) 428 431 (fontified t face font-lock-type-face) 431 432 (fontified t c-type c-decl-id-start face font-lock-type-face) 432 433 (fontified t) 433 445 (fontified t face font-lock-variable-name-face) 445 463 (fontified t) 463 467 (fontified t face font-lock-type-face) 467 468 (fontified t c-type c-decl-id-start face font-lock-type-face) 468 469 (fontified t) 469 478 (fontified t face font-lock-variable-name-face) 478 496 (fontified t) 496 500 (fontified t face font-lock-type-face) 500 501 (fontified t c-type c-decl-id-start face font-lock-type-face) 501 502 (fontified t) 502 519 (fontified t face font-lock-variable-name-face) 519 537 (fontified t) 537 539 (fontified t face font-lock-type-face) 539 540 (fontified t c-type c-decl-id-start face font-lock-type-face) 540 541 (fontified t) 541 551 (fontified t face font-lock-variable-name-face) 551 569 (fontified t) 569 571 (fontified t face font-lock-type-face) 571 572 (fontified t c-type c-decl-id-start face font-lock-type-face) 572 573 (fontified t) 573 587 (fontified t face font-lock-variable-name-face) 587 605 (fontified t) 605 609 (fontified t face font-lock-type-face) 609 610 (fontified t c-type c-decl-id-start face font-lock-type-face) 610 611 (fontified t) 611 623 (fontified t face font-lock-variable-name-face) 623 641 (fontified t) 641 645 (fontified t face font-lock-type-face) 645 646 (fontified t c-type c-decl-id-start face font-lock-type-face) 646 647 (fontified t) 647 663 (fontified t face font-lock-variable-name-face) 663 681 (fontified t) 681 685 (fontified t face font-lock-type-face) 685 686 (fontified t c-type c-decl-id-start face font-lock-type-face) 686 687 (fontified t) 687 699 (fontified t face font-lock-variable-name-face) 699 702 (fontified t) 702 708 (fontified t c-in-sws t c-is-sws t) 708 718 (fontified t c-in-sws t c-is-sws t) 718 719 (fontified t face font-lock-doc-face c-in-sws t c-is-sws t) 719 722 (fontified t face font-lock-doc-face c-in-sws t) 722 737 (fontified t face font-lock-doc-face c-in-sws t) 737 740 (fontified t face font-lock-doc-face c-in-sws t) 740 741 (fontified t c-in-sws t) 741 742 (fontified t c-is-sws t c-in-sws t) 742 757 (fontified t c-is-sws t c-in-sws t) 757 758 (fontified t c-is-sws t face font-lock-type-face) 758 761 (fontified t face font-lock-type-face) 761 762 (fontified t c-type c-decl-id-start face font-lock-type-face) 762 763 (fontified t) 763 775 (fontified t face font-lock-variable-name-face) 775 793 (fontified t) 793 797 (fontified t face font-lock-type-face) 797 798 (fontified t c-type c-decl-id-start face font-lock-type-face) 798 799 (fontified t) 799 818 (fontified t face font-lock-variable-name-face) 818 836 (fontified t) 836 840 (fontified t face font-lock-type-face) 840 841 (fontified t c-type c-decl-id-start face font-lock-type-face) 841 842 (fontified t) 842 861 (fontified t face font-lock-variable-name-face) 861 879 (fontified t) 879 882 (fontified t face font-lock-type-face) 882 883 (fontified t c-type c-decl-id-start face font-lock-type-face) 883 884 (fontified t) 884 902 (fontified t face font-lock-variable-name-face) 902 905 (fontified t) 905 921 (fontified t c-in-sws t c-is-sws t) 921 922 (fontified t face font-lock-doc-face c-in-sws t c-is-sws t) 922 925 (fontified t face font-lock-doc-face c-in-sws t) 925 931 (fontified t face font-lock-doc-face c-in-sws t) 931 934 (fontified t face font-lock-doc-face c-in-sws t) 934 935 (fontified t c-in-sws t) 935 951 (fontified t c-is-sws t c-in-sws t) 951 952 (fontified t c-is-sws t face font-lock-type-face) 952 956 (fontified t face font-lock-type-face) 956 957 (fontified t c-type c-decl-id-start face font-lock-type-face) 957 958 (fontified t) 958 975 (fontified t face font-lock-variable-name-face) 975 993 (fontified t) 993 995 (fontified t face font-lock-type-face) 995 996 (fontified t c-type c-decl-id-start face font-lock-type-face) 996 997 (fontified t) 997 1016 (fontified t face font-lock-variable-name-face) 1016 1017 (fontified t c-type c-decl-id-start) 1017 1035 (fontified t) 1035 1050 (fontified t face font-lock-function-name-face) 1050 1071 (fontified t) 1071 1074 (fontified t face font-lock-type-face) 1074 1075 (fontified t c-type c-decl-id-start face font-lock-type-face) 1075 1076 (fontified t) 1076 1080 (fontified t face font-lock-function-name-face) 1080 1100 (fontified t) 1100 1105 (fontified t face font-lock-type-face) 1105 1106 (fontified t c-type c-decl-id-start face font-lock-type-face) 1106 1107 (fontified t) 1107 1119 (fontified t face font-lock-function-name-face) 1119 1120 (fontified t c-type c-decl-arg-start) 1120 1126 (fontified t face font-lock-type-face) 1126 1127 (fontified t) 1127 1132 (fontified t face font-lock-variable-name-face) 1132 1151 (fontified t) 1151 1156 (fontified t face font-lock-type-face) 1156 1157 (fontified t c-type c-decl-id-start face font-lock-type-face) 1157 1158 (fontified t) 1158 1170 (fontified t face font-lock-function-name-face) 1170 1171 (fontified t c-type c-decl-arg-start) 1171 1177 (fontified t face font-lock-type-face) 1177 1178 (fontified t) 1178 1183 (fontified t face font-lock-variable-name-face) 1183 1202 (fontified t) 1202 1203 (fontified t face font-lock-doc-face c-is-sws t c-in-sws t) 1203 1206 (fontified t face font-lock-doc-face c-in-sws t) 1206 1241 (fontified t face font-lock-doc-face c-in-sws t) 1241 1246 (fontified t face font-lock-doc-face c-in-sws t) 1246 1249 (fontified t face font-lock-doc-face c-in-sws t) 1249 1250 (fontified t c-in-sws t) 1250 1266 (fontified nil c-in-sws t) 1266 1267 (fontified nil c-is-sws t) 1267 2819 (fontified nil) 2819 2820 (fontified nil) 2820 4542 (fontified nil)) . 824) (undo-tree-id0 . -1815) (undo-tree-id1 . -11) (undo-tree-id2 . -18) (undo-tree-id3 . -72) (undo-tree-id4 . -92) (undo-tree-id5 . -109) (undo-tree-id6 . -128) (undo-tree-id7 . -145) (undo-tree-id8 . -167) (undo-tree-id9 . -184) (undo-tree-id10 . -207) (undo-tree-id11 . -224) (undo-tree-id12 . -245) (undo-tree-id13 . -262) (undo-tree-id14 . -284) (undo-tree-id15 . -301) (undo-tree-id16 . -325) (undo-tree-id17 . -342) (undo-tree-id18 . -367) (undo-tree-id19 . -427) (undo-tree-id20 . -446) (undo-tree-id21 . -463) (undo-tree-id22 . -479) (undo-tree-id23 . -496) (undo-tree-id24 . -520) (undo-tree-id25 . -537) (undo-tree-id26 . -552) (undo-tree-id27 . -569) (undo-tree-id28 . -588) (undo-tree-id29 . -605) (undo-tree-id30 . -624) (undo-tree-id31 . -641) (undo-tree-id32 . -664) (undo-tree-id33 . -681) (undo-tree-id34 . -700) (undo-tree-id35 . -757) (undo-tree-id36 . -776) (undo-tree-id37 . -793) (undo-tree-id38 . -819) (undo-tree-id39 . -836) (undo-tree-id40 . -862) (undo-tree-id41 . -879) (undo-tree-id42 . -903) (undo-tree-id43 . -951) (undo-tree-id44 . -976) (undo-tree-id45 . -993) (undo-tree-id46 . -1017) (undo-tree-id47 . -1035) (undo-tree-id48 . -1053) (undo-tree-id49 . -1071) (undo-tree-id50 . -1083) (undo-tree-id51 . -1100) (undo-tree-id52 . -1134) (undo-tree-id53 . -1120) (undo-tree-id54 . -1133) (undo-tree-id55 . -1266) (undo-tree-id56 . -1496) (undo-tree-id57 . -1300) (undo-tree-id58 . -1313) (undo-tree-id59 . -1578) (undo-tree-id60 . -1811) (undo-tree-id61 . -1612) (undo-tree-id62 . -1625) (undo-tree-id63 . -1817) (undo-tree-id64 . -2249) (undo-tree-id65 . -1846) (undo-tree-id66 . -1853) (undo-tree-id67 . -1870) (undo-tree-id68 . -1879) (undo-tree-id69 . -1896) (undo-tree-id70 . -1922) (undo-tree-id71 . -1932) (undo-tree-id72 . -1939) (undo-tree-id73 . -1956) (undo-tree-id74 . -1968) (undo-tree-id75 . -1986) (undo-tree-id76 . -2026) (undo-tree-id77 . -1996) (undo-tree-id78 . -2003) (undo-tree-id79 . -2004) (undo-tree-id80 . -2025) (undo-tree-id81 . -2043) (undo-tree-id82 . -2064) (undo-tree-id83 . -2058) (undo-tree-id84 . -2063) (undo-tree-id85 . -2081) (undo-tree-id86 . -2098) (undo-tree-id87 . -2115) (undo-tree-id88 . -2138) (undo-tree-id89 . -2132) (undo-tree-id90 . -2137) (undo-tree-id91 . -2155) (undo-tree-id92 . -2174) (undo-tree-id93 . -2191) (undo-tree-id94 . -2210) (undo-tree-id95 . -2204) (undo-tree-id96 . -2209) (undo-tree-id97 . -2227) (undo-tree-id98 . -2246) (undo-tree-id99 . -2252) (undo-tree-id100 . -2753) (undo-tree-id101 . -2283) (undo-tree-id102 . -2290) (undo-tree-id103 . -2307) (undo-tree-id104 . -2316) (undo-tree-id105 . -2333) (undo-tree-id106 . -2352) (undo-tree-id107 . -2369) (undo-tree-id108 . -2399) (undo-tree-id109 . -2416) (undo-tree-id110 . -2430) (undo-tree-id111 . -2447) (undo-tree-id112 . -2463) (undo-tree-id113 . -2480) (undo-tree-id114 . -2498) (undo-tree-id115 . -2516) (undo-tree-id116 . -2533) (undo-tree-id117 . -2550) (undo-tree-id118 . -2578) (undo-tree-id119 . -2560) (undo-tree-id120 . -2577) (undo-tree-id121 . -2653) (undo-tree-id122 . -2665) (undo-tree-id123 . -2682) (undo-tree-id124 . -2696) (undo-tree-id125 . -2705) (undo-tree-id126 . -2713) (undo-tree-id127 . -2730) (undo-tree-id128 . -2750) (undo-tree-id129 . -2755) (undo-tree-id130 . -2782) (undo-tree-id131 . -2789) (undo-tree-id132 . -2844) (undo-tree-id133 . -2851) (undo-tree-id134 . -2924) (undo-tree-id135 . -2943) (undo-tree-id136 . -2960) (undo-tree-id137 . -2983) (undo-tree-id138 . -3058) (undo-tree-id139 . -3083) (undo-tree-id140 . -3100) (undo-tree-id141 . -3115) (undo-tree-id142 . -3197) (undo-tree-id143 . -3215) (undo-tree-id144 . -3232) (undo-tree-id145 . -3250) (undo-tree-id146 . -3298) (undo-tree-id147 . -3308) (undo-tree-id148 . -3325) (undo-tree-id149 . -3346) (undo-tree-id150 . -3363) (undo-tree-id151 . -3397) (undo-tree-id152 . -3414) (undo-tree-id153 . -3450) (undo-tree-id154 . -3467) (undo-tree-id155 . -3494) (undo-tree-id156 . -3511) (undo-tree-id157 . -3540) (undo-tree-id158 . -3589) (undo-tree-id159 . -3623) (undo-tree-id160 . -3642) (undo-tree-id161 . -3650) (undo-tree-id162 . -3668) (undo-tree-id163 . -3701) (undo-tree-id164 . -3678) (undo-tree-id165 . -3700) (undo-tree-id166 . -3718) (undo-tree-id167 . -3762) (undo-tree-id168 . -3732) (undo-tree-id169 . -3743) (undo-tree-id170 . -3744) (undo-tree-id171 . -3761) (undo-tree-id172 . -3779) (undo-tree-id173 . -3803) (undo-tree-id174 . -3791) (undo-tree-id175 . -3802) (undo-tree-id176 . -3821) (undo-tree-id177 . -3850) (undo-tree-id178 . -3838) (undo-tree-id179 . -3849) (undo-tree-id180 . -3867) (undo-tree-id181 . -3914) (undo-tree-id182 . -3882) (undo-tree-id183 . -3889) (undo-tree-id184 . -3933) (undo-tree-id185 . -3965) (undo-tree-id186 . -3953) (undo-tree-id187 . -3964) (undo-tree-id188 . -3982) (undo-tree-id189 . -4010) (undo-tree-id190 . -4027) (undo-tree-id191 . -4050) (undo-tree-id192 . -4067) (undo-tree-id193 . -4089) (undo-tree-id194 . -4164) (undo-tree-id195 . -4194) (undo-tree-id196 . -4181) (undo-tree-id197 . -4193) (undo-tree-id198 . -4211) (undo-tree-id199 . -4241) (undo-tree-id200 . -4230) (undo-tree-id201 . -4240) (undo-tree-id202 . -4258) (undo-tree-id203 . -4303) (undo-tree-id204 . -4283) (undo-tree-id205 . -4302) (undo-tree-id206 . -4321) (undo-tree-id207 . -4349) (undo-tree-id208 . -4333) (undo-tree-id209 . -4348) (undo-tree-id210 . -4366) (undo-tree-id211 . -4410) (undo-tree-id212 . -4378) (undo-tree-id213 . -4393) (undo-tree-id214 . -4394) (undo-tree-id215 . -4409) (undo-tree-id216 . -4427) (undo-tree-id217 . -4445) (undo-tree-id218 . -4462) (undo-tree-id219 . -4480) (undo-tree-id220 . -4491) (undo-tree-id221 . -4499) (undo-tree-id222 . -4516) (undo-tree-id223 . -4527) (t 25138 17655 136974 443000)) nil (25139 20570 368095 388000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . -2012) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 2013 (t 25139 20570 372913 769000)) nil (25139 20582 263056 892000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . 1656) (t 25139 20582 269579 985000)) nil (25139 20617 868740 585000) 0 nil])
([nil nil ((1656 . 1657)) nil (25139 20617 868727 584000) 0 nil])
([nil nil ((1661 . 1662)) nil (25139 20617 868714 585000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . 1662)) nil (25139 20617 868701 585000) 0 nil])
([nil nil ((1662 . 1663)) nil (25139 20617 868684 484000) 0 nil])
([nil nil ((1664 . 1665)) nil (25139 20617 868669 185000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . 1665)) nil (25139 20617 868652 585000) 0 nil])
([nil nil ((1665 . 1666)) nil (25139 20617 868636 685000) 0 nil])
([nil nil ((1879 . 1881)) nil (25139 20617 868621 985000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1881)) nil (25139 20617 868606 485000) 0 nil])
([nil nil ((1877 . 1879)) nil (25139 20617 868591 985000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1879)) nil (25139 20617 868579 85000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1872)) nil (25139 20617 868565 885000) 0 nil])
([nil nil ((1872 . 1873)) nil (25139 20639 381416 241000) 0 nil])
([nil nil ((nil ws-butler-chg chg 3350 . 3351) (#(" m_" 0 3 (ws-butler-chg chg)) . -3350) (3353 . 3354) (nil ws-butler-chg chg 3142 . 3143) (#(" m_" 0 3 (ws-butler-chg chg)) . -3142) (3145 . 3146) (nil ws-butler-chg chg 3090 . 3091) (#(" m_" 0 3 (ws-butler-chg chg)) . -3090) (3093 . 3094) (nil ws-butler-chg chg 3059 . 3060) (#(" m_" 0 3 (ws-butler-chg chg)) . -3059) (3062 . 3063) (nil ws-butler-chg chg 3040 . 3041) (#(" m_" 0 3 (ws-butler-chg chg)) . -3040) (3043 . 3044) (nil ws-butler-chg chg 3000 . 3001) (#(" m_" 0 3 (ws-butler-chg chg)) . -3000) (3003 . 3004) (nil ws-butler-chg chg 2968 . 2969) (#(" m_" 0 3 (ws-butler-chg chg)) . -2968) (2971 . 2972) (nil ws-butler-chg chg 2952 . 2953) (#(" m_" 0 3 (ws-butler-chg chg)) . -2952) (2955 . 2956) (nil ws-butler-chg chg 2919 . 2920) (#(" m_" 0 3 (ws-butler-chg chg)) . -2919) (2922 . 2923) (nil ws-butler-chg chg 2900 . 2901) (#(" m_" 0 3 (ws-butler-chg chg)) . -2900) (2903 . 2904) (nil ws-butler-chg chg 2831 . 2832) (nil face font-lock-variable-name-face 2831 . 2832) (#(" m_" 0 1 (ws-butler-chg chg) 1 3 (ws-butler-chg chg face font-lock-variable-name-face)) . -2831) (2834 . 2835) (nil ws-butler-chg chg 2807 . 2808) (nil face font-lock-variable-name-face 2807 . 2808) (#(" m_" 0 1 (ws-butler-chg chg) 1 3 (ws-butler-chg chg face font-lock-variable-name-face)) . -2807) (2810 . 2811) (nil ws-butler-chg chg 2747 . 2748) (nil face font-lock-variable-name-face 2747 . 2748) (#(" m_" 0 1 (ws-butler-chg chg) 1 3 (ws-butler-chg chg face font-lock-variable-name-face)) . -2747) (2750 . 2751) (nil ws-butler-chg chg 2725 . 2726) (nil face font-lock-variable-name-face 2725 . 2726) (#(" m_" 0 1 (ws-butler-chg chg) 1 3 (ws-butler-chg chg face font-lock-variable-name-face)) . -2725) (2728 . 2729) (nil ws-butler-chg chg 2431 . 2432) (nil fontified t 2431 . 2432) (nil face font-lock-variable-name-face 2431 . 2432) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2431) (2434 . 2435) (nil ws-butler-chg chg 2414 . 2415) (nil fontified t 2414 . 2415) (nil face font-lock-variable-name-face 2414 . 2415) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2414) (2417 . 2418) (nil ws-butler-chg chg 2397 . 2398) (nil fontified t 2397 . 2398) (nil face font-lock-variable-name-face 2397 . 2398) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2397) (2400 . 2401) (nil ws-butler-chg chg 2382 . 2383) (nil fontified t 2382 . 2383) (nil face font-lock-variable-name-face 2382 . 2383) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2382) (2385 . 2386) (nil ws-butler-chg chg 2352 . 2353) (nil fontified t 2352 . 2353) (nil face font-lock-variable-name-face 2352 . 2353) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2352) (2355 . 2356) (nil ws-butler-chg chg 2335 . 2336) (nil fontified t 2335 . 2336) (nil face font-lock-variable-name-face 2335 . 2336) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2335) (2338 . 2339) (nil ws-butler-chg chg 2079 . 2080) (nil fontified t 2079 . 2080) (nil face font-lock-variable-name-face 2079 . 2080) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2079) (2082 . 2083) (nil ws-butler-chg chg 2056 . 2057) (nil fontified t 2056 . 2057) (nil face font-lock-variable-name-face 2056 . 2057) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2056) (2059 . 2060) 2050) nil (25139 20646 844338 975000) 0 nil] [nil nil ((#(" m_" 0 3 (ws-butler-chg chg)) . -3329) (3332 . 3332) (#(" m_" 0 3 (ws-butler-chg chg)) . -3122) (3125 . 3125) (#(" m_" 0 3 (ws-butler-chg chg)) . -3071) (3074 . 3074) (#(" m_" 0 3 (ws-butler-chg chg)) . -3041) (3044 . 3044) (#(" m_" 0 3 (ws-butler-chg chg)) . -3023) (3026 . 3026) (#(" m_" 0 3 (ws-butler-chg chg)) . -2984) (2987 . 2987) (#(" m_" 0 3 (ws-butler-chg chg)) . -2953) (2956 . 2956) (#(" m_" 0 3 (ws-butler-chg chg)) . -2938) (2941 . 2941) (#(" m_" 0 3 (ws-butler-chg chg)) . -2906) (2909 . 2909) (#(" m_" 0 3 (ws-butler-chg chg)) . -2888) (2891 . 2891) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2820) (2823 . 2823) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2797) (2800 . 2800) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2738) (2741 . 2741) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2717) (2720 . 2720) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2424) (2427 . 2427) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2408) (2411 . 2411) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2392) (2395 . 2395) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2378) (2381 . 2381) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2349) (2352 . 2352) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2333) (2336 . 2336) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2078) (2081 . 2081) (#(" m_" 0 1 (ws-butler-chg chg fontified t) 1 3 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -2056) (t 25139 20617 872911 960000) (2059 . 2059) 2050 (t 25139 20617 872911 960000)) ((nil ws-butler-chg delete 2059 . 2060) (2056 . 2059) (nil ws-butler-chg delete 2081 . 2082) (2078 . 2081) (nil ws-butler-chg delete 2336 . 2337) (2333 . 2336) (nil ws-butler-chg delete 2352 . 2353) (2349 . 2352) (nil ws-butler-chg delete 2381 . 2382) (2378 . 2381) (nil ws-butler-chg delete 2395 . 2396) (2392 . 2395) (nil ws-butler-chg delete 2411 . 2412) (2408 . 2411) (nil ws-butler-chg delete 2427 . 2428) (2424 . 2427) (nil ws-butler-chg delete 2720 . 2721) (2717 . 2720) (nil ws-butler-chg delete 2741 . 2742) (2738 . 2741) (nil ws-butler-chg delete 2800 . 2801) (2797 . 2800) (nil ws-butler-chg delete 2823 . 2824) (2820 . 2823) (nil ws-butler-chg delete 2891 . 2892) (2888 . 2891) (nil ws-butler-chg delete 2909 . 2910) (2906 . 2909) (nil ws-butler-chg delete 2941 . 2942) (2938 . 2941) (nil ws-butler-chg delete 2956 . 2957) (2953 . 2956) (nil ws-butler-chg delete 2987 . 2988) (2984 . 2987) (nil ws-butler-chg delete 3026 . 3027) (3023 . 3026) (nil ws-butler-chg delete 3044 . 3045) (3041 . 3044) (nil ws-butler-chg delete 3074 . 3075) (3071 . 3074) (nil ws-butler-chg delete 3125 . 3126) (3122 . 3125) (nil ws-butler-chg delete 3332 . 3333) (3329 . 3332) (t 25139 20632 129578 85000)) (25139 20632 127393 646000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3184) (t 25139 20646 846244 191000)) nil (25139 20699 401663 133000) 0 nil])
nil
([nil nil ((3184 . 3185)) nil (25139 20699 401649 833000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3220)) nil (25139 20699 401635 134000) 0 nil])
([nil nil ((3220 . 3221)) nil (25139 20699 401622 634000) 0 nil])
([nil nil ((3224 . 3225)) nil (25139 20699 401610 134000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3225)) nil (25139 20699 401597 433000) 0 nil])
([nil nil ((3225 . 3226)) nil (25139 20699 401584 933000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3268)) nil (25139 20699 401571 833000) 0 nil])
([nil nil ((3268 . 3269)) nil (25139 20699 401376 333000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3296)) nil (25139 20699 401363 533000) 0 nil])
([nil nil ((3296 . 3297)) nil (25139 20699 401350 933000) 0 nil])
([nil nil ((3299 . 3301)) nil (25139 20699 401338 333000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3301)) nil (25139 20699 401325 533000) 0 nil])
([nil nil ((3300 . 3307)) nil (25139 20699 401313 33000) 0 nil])
([nil nil ((#("v" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3307)) nil (25139 20699 401300 133000) 0 nil])
([nil nil ((3307 . 3308)) nil (25139 20699 401287 533000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3336)) nil (25139 20699 401274 833000) 0 nil])
([nil nil ((3336 . 3337)) nil (25139 20699 401261 933000) 0 nil])
([nil nil ((3339 . 3340)) nil (25139 20699 401248 933000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3340)) nil (25139 20699 401236 133000) 0 nil])
([nil nil ((3340 . 3341)) nil (25139 20699 401223 733000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 3801)) nil (25139 20699 401210 933000) 0 nil])
([nil nil ((3801 . 3802)) nil (25139 20699 401198 233000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face font-lock-function-name-face)) . 3816)) nil (25139 20699 401185 233000) 0 nil])
([nil nil ((3816 . 3817)) nil (25139 20699 401172 433000) 0 nil])
([nil nil ((3819 . 3822)) nil (25139 20699 401159 733000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face font-lock-function-name-face)) . 3822)) nil (25139 20699 401147 34000) 0 nil])
([nil nil ((3826 . 3827)) nil (25139 20699 401134 133000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face font-lock-function-name-face)) . 3827)) nil (25139 20699 401120 733000) 0 nil])
([nil nil ((3827 . 3828)) nil (25139 20699 401104 733000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2121) (t 25139 20699 406242 185000)) nil (25139 20741 522251 714000) 0 nil])
([nil nil ((2121 . 2122)) nil (25139 20741 522238 814000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2164)) nil (25139 20741 522226 114000) 0 nil])
([nil nil ((2164 . 2165)) nil (25139 20741 522213 414000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2188)) nil (25139 20741 522200 614000) 0 nil])
([nil nil ((2188 . 2189)) nil (25139 20741 522187 714000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2208)) nil (25139 20741 522175 14000) 0 nil])
([nil nil ((2208 . 2209)) nil (25139 20741 522162 414000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2234)) nil (25139 20741 522149 514000) 0 nil])
([nil nil ((2234 . 2235)) nil (25139 20741 522137 14000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2256)) nil (25139 20741 522124 14000) 0 nil])
([nil nil ((2256 . 2257)) nil (25139 20741 522111 14000) 0 nil])
([nil nil ((#("G" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2278)) nil (25139 20741 522098 114000) 0 nil])
([nil nil ((2278 . 2279)) nil (25139 20741 522085 414000) 0 nil])
([nil nil ((2281 . 2283)) nil (25139 20741 522072 814000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2283)) nil (25139 20741 522060 14000) 0 nil])
([nil nil ((2259 . 2261)) nil (25139 20741 522047 313000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2261)) nil (25139 20741 522034 414000) 0 nil])
([nil nil ((2237 . 2239)) nil (25139 20741 522021 514000) 0 nil])
([nil nil ((#("D" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2239)) nil (25139 20741 522008 814000) 0 nil])
([nil nil ((2211 . 2213)) nil (25139 20741 521996 314000) 0 nil])
([nil nil ((#("D" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2213)) nil (25139 20741 521983 313000) 0 nil])
([nil nil ((2191 . 2193)) nil (25139 20741 521970 614000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2193)) nil (25139 20741 521957 814000) 0 nil])
([nil nil ((2167 . 2169)) nil (25139 20741 521945 14000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2169)) nil (25139 20741 521928 114000) 0 nil])
([nil nil ((2020 . 2021) (t 25139 20741 526240 580000)) nil (25139 20768 841103 657000) 0 nil])
([nil nil ((2021 . 2022)) nil (25139 20768 841090 857000) 0 nil])
([nil nil ((2022 . 2024)) nil (25139 20768 841078 457000) 0 nil])
([nil nil ((2024 . 2045)) nil (25139 20768 841066 57000) 0 nil])
([nil nil ((2045 . 2054)) nil (25139 20768 841053 457000) 0 nil])
([nil nil ((2054 . 2064)) nil (25139 20768 841040 157000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2063) (undo-tree-id226 . -1) 2064) nil (25139 20768 841026 657000) 0 nil])
([nil nil ((2063 . 2064)) nil (25139 20768 841001 157000) 0 nil])
([nil nil ((2064 . 2065)) nil (25139 20768 840988 257000) 0 nil])
([nil nil ((2065 . 2066)) nil (25139 20768 840958 857000) 0 nil])
([nil nil ((2349 . 2350) (t 25139 20768 846239 544000)) nil (25139 20801 174136 654000) 0 nil])
([nil nil ((2350 . 2352)) nil (25139 20801 174123 254000) 0 nil])
([nil nil ((2352 . 2354)) nil (25139 20801 174110 554000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2353) (undo-tree-id236 . -1) 2354) nil (25139 20801 174097 554000) 0 nil])
([nil nil ((2353 . 2356)) nil (25139 20801 174079 154000) 0 nil])
([nil nil ((#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2355) (undo-tree-id235 . -1) 2356) nil (25139 20801 174066 154000) 0 nil])
([nil nil ((2355 . 2376)) nil (25139 20801 174050 254000) 0 nil])
([nil nil ((2376 . 2377)) nil (25139 20801 174037 554000) 0 nil])
([nil nil ((#("d" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2371) (undo-tree-id229 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2372) (undo-tree-id230 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2373) (undo-tree-id231 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2374) (undo-tree-id232 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2375) (undo-tree-id233 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2376) (undo-tree-id234 . -1) 2377) nil (25139 20801 174023 254000) 0 nil])
([nil nil ((2371 . 2392)) nil (25139 20801 174001 254000) 0 nil])
([nil nil ((#("j" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face)) . -2391) (undo-tree-id228 . -1) 2392) nil (25139 20801 173987 954000) 0 nil])
([nil nil ((2391 . 2404)) nil (25139 20801 173971 654000) 0 nil])
([nil nil ((2404 . 2405)) nil (25139 20801 173958 854000) 0 nil])
([nil nil ((2405 . 2406)) nil (25139 20801 173946 54000) 0 nil])
([nil nil ((2398 . 2406)) nil (25139 20801 173933 354000) 0 nil])
([nil nil ((#("d" 0 1 (ws-butler-chg delete fontified t face font-lock-doc-face c-in-sws t)) . 2406) (undo-tree-id227 . -1) (#("e" 0 1 (ws-butler-chg delete fontified t face font-lock-doc-face c-in-sws t)) . 2406) (#("e" 0 1 (ws-butler-chg delete fontified t face font-lock-doc-face c-in-sws t)) . 2406) (#("p" 0 1 (ws-butler-chg delete fontified t face font-lock-doc-face c-in-sws t)) . 2406) (#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-doc-face c-in-sws t)) . 2406)) nil (25139 20801 173916 854000) 0 nil])
([nil nil ((836 . 837) (t 25139 20801 179571 645000)) nil (25139 20836 136432 748000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1502)) nil (25139 20836 136419 648000) 0 nil])
([nil nil ((1502 . 1503)) nil (25139 20836 136406 948000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1519)) nil (25139 20836 136391 548000) 0 nil])
([nil nil ((1519 . 1520)) nil (25139 20836 136376 748000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1556)) nil (25139 20836 136363 648000) 0 nil])
([nil nil ((1556 . 1557)) nil (25139 20836 136334 248000) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 1557)) nil (25139 20836 136320 848000) 0 nil])
([nil nil ((1560 . 1561)) nil (25139 20836 136308 348000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1561)) nil (25139 20836 136295 348000) 0 nil])
([nil nil ((1561 . 1562)) nil (25139 20836 136282 848000) 0 nil])
([nil nil ((1563 . 1564)) nil (25139 20836 136270 448000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1564)) nil (25139 20836 136257 848000) 0 nil])
([nil nil ((1564 . 1565)) nil (25139 20836 136245 148000) 0 nil])
([nil nil ((1524 . 1526)) nil (25139 20836 136232 648000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1526)) nil (25139 20836 136219 948000) 0 nil])
([nil nil ((1527 . 1529)) nil (25139 20836 136207 148000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1529)) nil (25139 20836 136190 248000) 0 nil])
([nil nil ((#("  /** Convert steps quantity to the real units */
" 0 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t face font-lock-doc-face) 3 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 46 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 46 49 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 49 50 (ws-butler-chg chg c-in-sws t fontified t)) . 1587) (t 25139 20836 139570 311000)) nil (25139 20849 1123 894000) 0 nil])
([nil nil ((#("  inline unit_t Motor::steps_to_units(unit_t steps) {
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-keyword-face) 3 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t) 9 14 (ws-butler-chg chg fontified t face font-lock-type-face) 14 15 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 15 16 (ws-butler-chg chg fontified t) 16 21 (ws-butler-chg chg fontified t face font-lock-constant-face) 21 23 (ws-butler-chg chg fontified t) 23 24 (ws-butler-chg chg fontified t face font-lock-function-name-face) 24 25 (ws-butler-chg delete fontified t face font-lock-function-name-face) 25 28 (ws-butler-chg chg fontified t face font-lock-function-name-face) 28 29 (ws-butler-chg chg fontified t face font-lock-function-name-face) 29 30 (ws-butler-chg chg fontified t face font-lock-function-name-face) 30 31 (ws-butler-chg delete fontified t face font-lock-function-name-face) 31 32 (ws-butler-chg chg fontified t face font-lock-function-name-face) 32 33 (ws-butler-chg chg fontified t face font-lock-function-name-face) 33 34 (ws-butler-chg delete fontified t face font-lock-function-name-face) 34 37 (ws-butler-chg chg fontified t face font-lock-function-name-face) 37 38 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 38 44 (ws-butler-chg chg fontified t face font-lock-type-face) 44 45 (ws-butler-chg chg fontified t) 45 50 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 50 51 (ws-butler-chg chg fontified t) 51 54 (ws-butler-chg chg fontified t)) . 1587) (undo-tree-id242 . -2) (undo-tree-id243 . -38) (undo-tree-id244 . -51)) nil (25139 20849 1110 594000) 0 nil])
([nil nil ((#("    float rotations = (float)steps / (float)microsteps_per_turn;
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 8 (ws-butler-chg chg fontified t face font-lock-type-face) 8 9 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (ws-butler-chg chg fontified t) 10 19 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 19 23 (ws-butler-chg chg fontified t) 23 28 (ws-butler-chg chg fontified t face font-lock-type-face) 28 38 (ws-butler-chg chg fontified t) 38 43 (ws-butler-chg chg fontified t face font-lock-type-face) 43 65 (ws-butler-chg chg fontified t)) . 1587)) nil (25139 20849 1093 194000) 0 nil])
([nil nil ((#("    return rotations * rotation_distance;
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 10 (ws-butler-chg chg fontified t face font-lock-keyword-face) 10 42 (ws-butler-chg chg fontified t)) . 1587)) nil (25139 20849 1080 394000) 0 nil])
([nil nil ((#("  }
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t)) . 1587) (undo-tree-id241 . -3)) nil (25139 20849 1067 394000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1587)) nil (25139 20849 1051 894000) 0 nil])
([nil nil ((#("  /** Convert steps quantity to the real units */
" 0 1 (ws-butler-chg delete c-in-sws t c-is-sws t fontified t) 1 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 3 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 16 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 16 46 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 46 49 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 49 50 (ws-butler-chg chg c-in-sws t fontified t)) . 1587)) nil (25139 20849 1039 294000) 0 nil])
([nil nil ((#("  inline step_t Motor::units_to_steps(unit_t units) {
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-keyword-face) 3 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t) 9 14 (ws-butler-chg chg fontified t face font-lock-type-face) 14 15 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 15 16 (ws-butler-chg chg fontified t) 16 21 (ws-butler-chg chg fontified t face font-lock-constant-face) 21 22 (ws-butler-chg chg fontified t) 22 23 (ws-butler-chg chg fontified t) 23 24 (ws-butler-chg chg fontified t face font-lock-function-name-face) 24 25 (ws-butler-chg delete fontified t face font-lock-function-name-face) 25 28 (ws-butler-chg chg fontified t face font-lock-function-name-face) 28 29 (ws-butler-chg chg fontified t face font-lock-function-name-face) 29 30 (ws-butler-chg chg fontified t face font-lock-function-name-face) 30 31 (ws-butler-chg delete fontified t face font-lock-function-name-face) 31 32 (ws-butler-chg chg fontified t face font-lock-function-name-face) 32 33 (ws-butler-chg chg fontified t face font-lock-function-name-face) 33 34 (ws-butler-chg delete fontified t face font-lock-function-name-face) 34 37 (ws-butler-chg chg fontified t face font-lock-function-name-face) 37 38 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 38 44 (ws-butler-chg chg fontified t face font-lock-type-face) 44 45 (ws-butler-chg chg fontified t) 45 50 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 50 51 (ws-butler-chg chg fontified t) 51 54 (ws-butler-chg chg fontified t)) . 1587) (undo-tree-id238 . -2) (undo-tree-id239 . -38) (undo-tree-id240 . -51)) nil (25139 20849 1026 94000) 0 nil])
([nil nil ((#("    float rotations = (float)units / rotation_distance;
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 8 (ws-butler-chg chg fontified t face font-lock-type-face) 8 9 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (ws-butler-chg chg fontified t) 10 19 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 19 23 (ws-butler-chg chg fontified t) 23 28 (ws-butler-chg chg fontified t face font-lock-type-face) 28 56 (ws-butler-chg chg fontified t)) . 1587)) nil (25139 20849 1007 994000) 0 nil])
([nil nil ((#("    return (step_t)(rotations * microsteps_per_turn);
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t) 4 10 (ws-butler-chg chg fontified t face font-lock-keyword-face) 10 12 (ws-butler-chg chg fontified t) 12 18 (ws-butler-chg chg fontified t face font-lock-type-face) 18 50 (ws-butler-chg chg fontified t) 50 52 (ws-butler-chg chg fontified t) 52 54 (ws-butler-chg chg fontified t)) . 1587)) nil (25139 20849 995 94000) 0 nil])
([nil nil ((#("  }
" 0 1 (ws-butler-chg delete fontified t) 1 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg delete fontified t)) . 1587) (undo-tree-id237 . -3)) nil (25139 20849 979 894000) 0 nil])
([nil nil ((#("  int id;
" 0 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 8 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t)) . 1667) (undo-tree-id257 . -2) (undo-tree-id258 . -9) (t 25139 20849 6236 484000)) nil (25139 20903 966589 529000) 0 nil])
([nil nil ((#("  StepMotorConfig* config;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 16 (ws-butler-chg chg fontified t face font-lock-type-face) 16 17 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 17 18 (ws-butler-chg chg fontified t) 18 19 (ws-butler-chg chg fontified t) 19 20 (fontified t face font-lock-variable-name-face) 20 25 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 25 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg chg fontified t)) . 1667) (undo-tree-id255 . -2) (undo-tree-id256 . -26)) nil (25139 20903 966571 629000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1667)) nil (25139 20903 966551 129000) 0 nil])
([nil nil ((#(" public:
" 0 1 (ws-butler-chg delete fontified t) 1 7 (ws-butler-chg chg fontified t face font-lock-keyword-face) 7 8 (ws-butler-chg chg fontified t c-type c-decl-id-start) 8 9 (ws-butler-chg chg fontified t)) . 1667) (undo-tree-id253 . -1) (undo-tree-id254 . -8)) nil (25139 20903 966535 29000) 0 nil])
([nil nil ((1867 . 1870)) nil (25139 20903 966514 330000) 0 nil])
([nil nil ((1868 . 1871) (#("  " 0 2 (ws-butler-chg chg fontified t)) . 1868) (undo-tree-id251 . -2) (undo-tree-id252 . -2) 1870) nil (25139 20903 966486 29000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified nil)) . 1907) (1869 . 1871) (#("    " 0 2 (ws-butler-chg chg fontified nil) 2 4 (ws-butler-chg chg fontified nil)) . 1869) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (nil rear-nonsticky nil 1917 . 1918) (nil fontified nil 1917 . 1918) (nil fontified nil 1916 . 1917) (nil fontified nil 1910 . 1916) (nil fontified nil 1909 . 1910) (nil fontified nil 1908 . 1909) (nil fontified nil 1907 . 1908) (nil fontified nil 1906 . 1907) (nil fontified nil 1901 . 1906) (nil fontified nil 1900 . 1901) (nil fontified nil 1899 . 1900) (nil fontified nil 1898 . 1899) (nil fontified nil 1897 . 1898) (nil fontified nil 1883 . 1897) (nil fontified nil 1882 . 1883) (nil fontified nil 1881 . 1882) (nil fontified nil 1880 . 1881) (nil fontified nil 1879 . 1880) (nil fontified nil 1878 . 1879) (nil fontified nil 1877 . 1878) (nil fontified nil 1876 . 1877) (nil fontified nil 1875 . 1876) (nil fontified nil 1873 . 1875) (nil fontified nil 1871 . 1873) (1871 . 1918)) nil (25139 20903 966464 130000) 0 nil])
([nil nil ((#("public:
" 0 1 (ws-butler-chg delete fontified t face font-lock-keyword-face) 1 6 (ws-butler-chg chg fontified t face font-lock-keyword-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t rear-nonsticky t)) . 1907) (undo-tree-id247 . -8)) nil (25139 20903 966430 229000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 1906) (undo-tree-id246 . -1)) nil (25139 20903 966410 629000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 1906) (undo-tree-id245 . -1)) nil (25139 20903 966389 829000) 0 nil])
([nil nil ((#("  bool get_enable();
" 0 1 (ws-butler-chg chg fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg fontified t)) . 1751) (undo-tree-id259 . -2) (undo-tree-id260 . -20) (undo-tree-id261 . -21) (undo-tree-id262 . -21) (t 25139 20903 969567 732000)) nil (25139 20983 850701 135000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1746 . 1747) (nil fontified nil 1746 . 1747) (nil fontified nil 1743 . 1746) (nil fontified nil 1739 . 1743) (nil fontified nil 1738 . 1739) (nil fontified nil 1737 . 1738) (nil fontified nil 1736 . 1737) (nil fontified nil 1735 . 1736) (nil fontified nil 1734 . 1735) (nil fontified nil 1733 . 1734) (nil fontified nil 1732 . 1733) (nil fontified nil 1731 . 1732) (nil fontified nil 1728 . 1731) (nil fontified nil 1727 . 1728) (nil fontified nil 1726 . 1727) (1726 . 1747)) nil (25139 20983 850666 235000) 0 nil])
([nil nil ((#("typedef step_t int;
" 0 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-type-face) 13 14 (fontified t c-type c-decl-type-start face font-lock-type-face) 14 15 (fontified t) 15 18 (fontified t face font-lock-type-face) 18 20 (fontified t)) . 759) (t 25139 20983 859564 694000)) nil (25139 21102 210052 486000) 0 nil])
([nil nil ((#("typedef units_t float;
" 0 1 (fontified t ws-butler-chg delete face font-lock-keyword-face) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-type-face) 14 15 (fontified t c-type c-decl-type-start face font-lock-type-face) 15 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 23 (fontified t)) . 759)) nil (25139 21102 210039 486000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 759) (undo-tree-id320 . -1)) nil (25139 21102 210026 486000) 0 nil])
([nil nil ((#("class StepMotorConfig {
" 0 1 (fontified t ws-butler-chg delete face font-lock-keyword-face) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face c-type c-decl-type-start) 5 6 (fontified t) 6 21 (fontified t face font-lock-type-face) 21 24 (fontified t ws-butler-chg chg)) . 759)) nil (25139 21102 210011 86000) 0 nil])
([nil nil ((#(" public:
" 0 1 (fontified t ws-butler-chg delete) 1 7 (fontified t ws-butler-chg chg face font-lock-keyword-face) 7 8 (fontified t ws-butler-chg chg c-type c-decl-end) 8 9 (fontified t ws-butler-chg chg)) . 759) (undo-tree-id318 . -1) (undo-tree-id319 . -8)) nil (25139 21102 209997 986000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 759)) nil (25139 21102 209981 686000) 0 nil])
([nil nil ((#("  /** GPIO settings */
" 0 1 (fontified t ws-butler-chg delete c-in-sws t c-is-sws t) 1 2 (fontified t ws-butler-chg chg c-in-sws t c-is-sws t) 2 3 (fontified t ws-butler-chg chg c-in-sws t c-is-sws t face font-lock-doc-face) 3 6 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 6 19 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 19 22 (fontified t ws-butler-chg chg c-in-sws t face font-lock-doc-face) 22 23 (fontified t ws-butler-chg chg c-in-sws t)) . 759)) nil (25139 21102 209968 886000) 0 nil])
([nil nil ((#("  gpio_num_t step_pin;
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-type-face) 3 11 (ws-butler-chg chg fontified t face font-lock-type-face) 11 12 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (ws-butler-chg chg fontified t) 13 21 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 21 23 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id316 . -2) (undo-tree-id317 . -22)) nil (25139 21102 209955 586000) 0 nil])
([nil nil ((#("  gpio_num_t dir_pin;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 11 (ws-butler-chg chg fontified t face font-lock-type-face) 11 12 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (ws-butler-chg chg fontified t) 13 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 22 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id314 . -2) (undo-tree-id315 . -21)) nil (25139 21102 209925 286000) 0 nil])
([nil nil ((#("  gpio_num_t enable_pin;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 11 (ws-butler-chg chg fontified t face font-lock-type-face) 11 12 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (ws-butler-chg chg fontified t) 13 23 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 23 25 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id311 . -25) (undo-tree-id312 . -2) (undo-tree-id313 . -24)) nil (25139 21102 209908 386000) 0 nil])
([nil nil ((#("  gpio_num_t endstop_pin;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 11 (ws-butler-chg chg fontified t face font-lock-type-face) 11 12 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (ws-butler-chg chg fontified t) 13 24 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 24 26 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id309 . -2) (undo-tree-id310 . -25)) nil (25139 21102 209890 686000) 0 nil])
([nil nil ((#("  bool dir_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 22 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 22 24 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id307 . -2) (undo-tree-id308 . -23)) nil (25139 21102 209873 786000) 0 nil])
([nil nil ((#("  bool step_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 23 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 23 25 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id305 . -2) (undo-tree-id306 . -24)) nil (25139 21102 209857 286000) 0 nil])
([nil nil ((#("  bool enable_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 25 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 25 27 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id303 . -2) (undo-tree-id304 . -26)) nil (25139 21102 209840 786000) 0 nil])
([nil nil ((#("  bool endstop_pin_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 26 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 26 28 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id301 . -2) (undo-tree-id302 . -27)) nil (25139 21102 209824 86000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 209807 786000) 0 nil])
([nil nil ((#("  /** Kinematic settings */
" 0 1 (ws-butler-chg delete c-in-sws t c-is-sws t fontified t) 1 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 3 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 24 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 24 27 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 27 28 (ws-butler-chg chg c-in-sws t fontified t)) . 759)) nil (25139 21102 209795 186000) 0 nil])
([nil nil ((#("  float max_velocity;
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-type-face) 3 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 22 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id299 . -2) (undo-tree-id300 . -21)) nil (25139 21102 209782 86000) 0 nil])
([nil nil ((#("  float max_accel;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 17 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 17 19 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id297 . -2) (undo-tree-id298 . -18)) nil (25139 21102 209765 286000) 0 nil])
([nil nil ((#("  float rotation_distance;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 25 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 25 27 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id295 . -2) (undo-tree-id296 . -26)) nil (25139 21102 209748 586000) 0 nil])
([nil nil ((#("  int microsteps;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 16 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 16 18 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id293 . -2) (undo-tree-id294 . -17)) nil (25139 21102 209729 886000) 0 nil])
([nil nil ((#("  int steps_per_turn;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 22 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id291 . -2) (undo-tree-id292 . -21)) nil (25139 21102 209713 186000) 0 nil])
([nil nil ((#("  float position_min;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 22 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id289 . -2) (undo-tree-id290 . -21)) nil (25139 21102 209696 286000) 0 nil])
([nil nil ((#("  float position_endstop;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 24 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 24 26 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id287 . -2) (undo-tree-id288 . -25)) nil (25139 21102 209679 786000) 0 nil])
([nil nil ((#("  float position_max;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 22 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id285 . -2) (undo-tree-id286 . -21)) nil (25139 21102 209663 286000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 209647 86000) 0 nil])
([nil nil ((#("  /** Homing settings */
" 0 1 (ws-butler-chg delete c-in-sws t c-is-sws t fontified t) 1 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 3 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 21 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 21 24 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 24 25 (ws-butler-chg chg c-in-sws t fontified t)) . 759)) nil (25139 21102 209634 286000) 0 nil])
([nil nil ((#("  float homing_speed;
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-type-face) 3 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 11 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 11 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 21 (ws-butler-chg chg fontified t) 21 22 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id283 . -2) (undo-tree-id284 . -21)) nil (25139 21102 209621 386000) 0 nil])
([nil nil ((#("  float homing_retract_dist;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 27 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 27 29 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id281 . -2) (undo-tree-id282 . -28)) nil (25139 21102 209604 886000) 0 nil])
([nil nil ((#("  float second_homing_speed;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 16 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 16 27 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 27 28 (ws-butler-chg chg fontified t) 28 29 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id279 . -2) (undo-tree-id280 . -28)) nil (25139 21102 209588 186000) 0 nil])
([nil nil ((#("  bool homing_dir_reverse;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 25 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 25 27 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id277 . -2) (undo-tree-id278 . -26)) nil (25139 21102 209571 886000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 209555 486000) 0 nil])
([nil nil ((#("  /** Config */
" 0 1 (ws-butler-chg delete c-in-sws t c-is-sws t fontified t) 1 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 3 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 12 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 12 15 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 15 16 (ws-butler-chg chg c-in-sws t fontified t)) . 759)) nil (25139 21102 209542 786000) 0 nil])
([nil nil ((#("  double distance_per_step;
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-type-face) 3 7 (ws-butler-chg chg fontified t face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 8 9 (ws-butler-chg chg fontified t) 9 26 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 26 28 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id275 . -2) (undo-tree-id276 . -27)) nil (25139 21102 209529 686000) 0 nil])
([nil nil ((#("  int microsteps_per_turn;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 25 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 25 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id273 . -2) (undo-tree-id274 . -26)) nil (25139 21102 209512 986000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 209494 786000) 0 nil])
([nil nil ((#("  StepMotorConfig();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 21 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id271 . -2) (undo-tree-id272 . -20)) nil (25139 21102 209481 686000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 209465 86000) 0 nil])
([nil nil ((#("  void init();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 14 (ws-butler-chg chg fontified t) 14 15 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id269 . -2) (undo-tree-id270 . -14)) nil (25139 21102 209452 86000) 0 nil])
([nil nil ((#("  unit_t steps_to_units(step_t steps);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 7 (ws-butler-chg chg fontified t face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 8 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg delete fontified t face font-lock-function-name-face) 11 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg chg fontified t face font-lock-function-name-face) 16 17 (ws-butler-chg delete fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg delete fontified t face font-lock-function-name-face) 20 23 (ws-butler-chg chg fontified t face font-lock-function-name-face) 23 24 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 24 30 (ws-butler-chg chg fontified t face font-lock-type-face) 30 31 (ws-butler-chg chg fontified t) 31 36 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 36 38 (ws-butler-chg chg fontified t) 38 39 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id265 . -2) (undo-tree-id266 . -38) (undo-tree-id267 . -24) (undo-tree-id268 . -37)) nil (25139 21102 209422 786000) 0 nil])
([nil nil ((#("  step_t uits_to_steps(unit_t units)
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 7 (ws-butler-chg chg fontified t face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 8 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg delete fontified t face font-lock-function-name-face) 11 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg delete fontified t face font-lock-function-name-face) 16 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg delete fontified t face font-lock-function-name-face) 19 22 (ws-butler-chg chg fontified t face font-lock-function-name-face) 22 23 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 23 29 (ws-butler-chg chg fontified t face font-lock-type-face) 29 30 (ws-butler-chg chg fontified t) 30 35 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 35 36 (ws-butler-chg chg fontified t) 36 37 (ws-butler-chg chg fontified t)) . 759)) nil (25139 21102 209403 986000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 209391 386000) 0 nil])
([nil nil ((#("};
" 0 1 (ws-butler-chg delete fontified t) 1 3 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id264 . -2)) nil (25139 21102 209378 486000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759)) nil (25139 21102 211878 86000) 0 nil])
([nil nil ((#("/** The basic motor control with GPIO pins */
" 0 1 (ws-butler-chg delete fontified t c-is-sws t c-in-sws t face font-lock-doc-face) 1 2 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 2 3 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 3 4 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 4 5 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 5 6 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 6 7 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 7 8 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 8 9 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 9 10 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 10 11 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 11 12 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 12 13 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 13 14 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 14 15 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 15 16 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 16 17 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 17 18 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 18 19 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 19 20 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 20 21 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 21 22 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 22 23 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 23 24 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 24 25 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 25 26 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 26 27 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 27 28 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 28 29 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 29 30 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 30 31 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 31 32 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 32 33 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 33 34 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 34 35 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 35 36 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 36 37 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 37 38 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 38 39 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 39 40 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 40 41 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 41 42 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 42 43 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 43 44 (ws-butler-chg chg fontified t c-in-sws t face font-lock-doc-face) 44 45 (ws-butler-chg chg fontified t face font-lock-doc-face c-in-sws t) 45 46 (ws-butler-chg delete fontified t c-is-sws t c-in-sws t)) . 759) (undo-tree-id373 . -46) (undo-tree-id374 . -46)) nil (25139 21257 326676 494000) 0 nil] [nil nil ((#("/** The basic motor control with GPIO pins */
" 0 1 (ws-butler-chg delete c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 1 2 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 2 3 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 3 4 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 4 5 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 5 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 7 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 7 8 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 8 9 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 9 10 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 10 11 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 11 12 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 12 13 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 13 14 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 14 15 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 15 16 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 16 17 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 17 18 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 18 19 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 19 20 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 20 21 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 21 22 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 22 23 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 23 24 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 24 25 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 25 26 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 26 27 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 27 28 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 28 29 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 29 30 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 30 31 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 31 32 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 32 33 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 33 34 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 34 35 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 35 36 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 36 37 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 37 38 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 38 39 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 39 40 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 40 41 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 41 42 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 42 43 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 43 44 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 44 45 (ws-butler-chg chg fontified t face font-lock-doc-face c-in-sws t) 45 46 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t)) . 759) (undo-tree-id263 . -46)) ((nil ws-butler-chg delete 805 . 806) (759 . 805)) (25139 21102 209347 986000) 0 nil])
([nil nil ((#("class StepMotorHAL {
" 0 1 (c-is-sws t fontified t ws-butler-chg delete face font-lock-keyword-face) 1 4 (ws-butler-chg chg fontified t face font-lock-keyword-face) 4 5 (ws-butler-chg chg fontified t face font-lock-keyword-face c-type c-decl-type-start) 5 6 (ws-butler-chg chg fontified t) 6 14 (ws-butler-chg chg fontified t face font-lock-type-face) 14 18 (ws-butler-chg chg fontified t face font-lock-type-face) 18 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id372 . -21)) nil (25139 21257 326659 294000) 0 nil])
nil
([nil nil ((#(" public:
" 0 1 (ws-butler-chg delete fontified t) 1 7 (ws-butler-chg chg fontified t face font-lock-keyword-face) 7 8 (ws-butler-chg chg fontified t c-type c-decl-end) 8 9 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id368 . -8) (undo-tree-id369 . -1) (undo-tree-id370 . -8) (undo-tree-id371 . -9)) nil (25139 21257 326643 394000) 0 nil])
([nil nil ((#("  StepMotor();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 15 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id365 . -2) (undo-tree-id366 . -14) (undo-tree-id367 . -15)) nil (25139 21257 326623 693000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759) (undo-tree-id364 . -1)) nil (25139 21257 326604 994000) 0 nil])
([nil nil ((#("  void init(int id, StepMotorConfig* cfg);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 12 15 (ws-butler-chg chg fontified t face font-lock-type-face) 15 16 (ws-butler-chg chg fontified t) 16 18 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 18 19 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 19 20 (ws-butler-chg chg fontified t) 20 35 (ws-butler-chg chg fontified t face font-lock-type-face) 35 37 (ws-butler-chg chg fontified t) 37 40 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 40 42 (ws-butler-chg chg fontified t) 42 43 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id355 . -43) (undo-tree-id356 . -43) (undo-tree-id357 . -2) (undo-tree-id358 . -42) (undo-tree-id359 . -12) (undo-tree-id360 . -19) (undo-tree-id361 . -20) (undo-tree-id362 . -41) (undo-tree-id363 . -43)) nil (25139 21257 326588 294000) 0 nil])
([nil nil ((#("  bool get_enable();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg chg fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg rear-nonsticky t fontified t)) . 759) (undo-tree-id352 . -2) (undo-tree-id353 . -20) (undo-tree-id354 . -21)) nil (25139 21257 326557 94000) 0 nil])
([nil nil ((#("  void set_enable(bool);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 18 22 (ws-butler-chg chg fontified t face font-lock-type-face) 22 24 (ws-butler-chg chg fontified t) 24 25 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id347 . -2) (undo-tree-id348 . -24) (undo-tree-id349 . -18) (undo-tree-id350 . -23) (undo-tree-id351 . -25)) nil (25139 21257 326535 694000) 0 nil])
([nil nil ((#("  void set_directon(bool);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 20 24 (ws-butler-chg chg fontified t face font-lock-type-face) 24 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id342 . -2) (undo-tree-id343 . -26) (undo-tree-id344 . -20) (undo-tree-id345 . -25) (undo-tree-id346 . -27)) nil (25139 21257 326515 394000) 0 nil])
([nil nil ((#("  bool get_directon();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 22 (ws-butler-chg chg fontified t) 22 23 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id339 . -2) (undo-tree-id340 . -22) (undo-tree-id341 . -23)) nil (25139 21257 326493 993000) 0 nil])
([nil nil ((#("  void set_step(bool);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 16 20 (ws-butler-chg chg fontified t face font-lock-type-face) 20 22 (ws-butler-chg chg fontified t) 22 23 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id334 . -2) (undo-tree-id335 . -22) (undo-tree-id336 . -16) (undo-tree-id337 . -21) (undo-tree-id338 . -23)) nil (25139 21257 326475 994000) 0 nil])
([nil nil ((#("  bool get_endpoint();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 22 (ws-butler-chg chg fontified t) 22 23 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id331 . -2) (undo-tree-id332 . -22) (undo-tree-id333 . -23)) nil (25139 21257 326455 694000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 759) (undo-tree-id329 . -1) (undo-tree-id330 . -1)) nil (25139 21257 326434 894000) 0 nil])
([nil nil ((#("  int id;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg delete fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 7 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 7 8 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 8 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id326 . -2) (undo-tree-id327 . -9) (undo-tree-id328 . -10)) nil (25139 21257 326413 594000) 0 nil])
([nil nil ((#("  StepMotorConfig* config;
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 16 (ws-butler-chg chg fontified t face font-lock-type-face) 16 17 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 17 18 (ws-butler-chg chg fontified t) 18 19 (ws-butler-chg chg fontified t) 19 20 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 20 25 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 25 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id323 . -2) (undo-tree-id324 . -26) (undo-tree-id325 . -27)) nil (25139 21257 326390 494000) 0 nil])
([nil nil ((#("};
" 0 1 (ws-butler-chg delete fontified t) 1 3 (ws-butler-chg chg fontified t)) . 759) (undo-tree-id321 . -2) (undo-tree-id322 . -3)) nil (25139 21257 326367 294000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t c-in-sws t ws-butler-chg delete face font-lock-string-face)) . 92) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("p" 0 1 (fontified t face font-lock-string-face c-in-sws t)) . 92) (t 25139 21257 332887 639000)) nil (25139 23113 31221 671000) 0 nil])
([nil nil ((756 . 767) (t 25139 23113 39483 776000)) nil (25139 23396 715091 759000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -766) (undo-tree-id378 . -1) 767) nil (25139 23396 715077 559000) 0 nil])
([nil nil ((766 . 777)) nil (25139 23396 715050 159000) 0 nil])
([nil nil ((777 . 778)) nil (25139 23396 715037 359000) 0 nil])
([nil nil ((778 . 779)) nil (25139 23396 715024 559000) 0 nil])
([nil nil ((779 . 786)) nil (25139 23396 715011 859000) 0 nil])
([nil nil ((786 . 797)) nil (25139 23396 714999 259000) 0 nil])
([nil nil ((797 . 798)) nil (25139 23396 714983 559000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1956) (t 25139 23396 722806 316000)) nil (25139 24561 718100 637000) 0 nil])
([nil nil ((1956 . 1957)) nil (25139 24561 718088 437000) 0 nil])
([nil nil ((1962 . 1964)) nil (25139 24561 718076 236000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1964)) nil (25139 24561 718063 136000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1992)) nil (25139 24561 718050 237000) 0 nil])
([nil nil ((1992 . 1993)) nil (25139 24561 718037 836000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2023)) nil (25139 24561 718009 537000) 0 nil])
([nil nil ((2023 . 2024)) nil (25139 24561 717996 836000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2049)) nil (25139 24561 717984 636000) 0 nil])
([nil nil ((2049 . 2050)) nil (25139 24561 717972 436000) 0 nil])
([nil nil ((2055 . 2056)) nil (25139 24561 717960 236000) 0 nil])
([nil nil ((#("E" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2056)) nil (25139 24561 717947 837000) 0 nil])
([nil nil ((2056 . 2057)) nil (25139 24561 717935 336000) 0 nil])
([nil nil ((2029 . 2030)) nil (25139 24561 717923 36000) 0 nil])
([nil nil ((2030 . 2031)) nil (25139 24561 717910 836000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2031)) nil (25139 24561 717898 237000) 0 nil])
([nil nil ((1998 . 2000)) nil (25139 24561 717885 836000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2000)) nil (25139 24561 717872 736000) 0 nil])
([nil nil ((1999 . 2004)) nil (25139 24561 717860 236000) 0 nil])
([nil nil ((2004 . 2006)) nil (25139 24561 717847 636000) 0 nil])
([nil nil ((2006 . 2007)) nil (25139 24561 717832 236000) 0 nil])
([nil nil ((1673 . 1675) (t 25139 24561 726095 263000)) nil (25139 24692 123190 501000) 0 nil])
([nil nil ((1675 . 1686)) nil (25139 24692 123177 602000) 0 nil])
([nil nil ((1686 . 1687)) nil (25139 24692 123164 802000) 0 nil])
([nil nil ((1687 . 1688)) nil (25139 24692 123152 202000) 0 nil])
([nil nil ((#(")" 0 1 (ws-butler-chg chg fontified t)) . -1686) (undo-tree-id380 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -1687) (undo-tree-id381 . -1) 1688) nil (25139 24692 123138 901000) 0 nil])
([nil nil ((1686 . 1691)) nil (25139 24692 123121 601000) 0 nil])
([nil nil ((1691 . 1692)) nil (25139 24692 123109 202000) 0 nil])
([nil nil ((1692 . 1695)) nil (25139 24692 123096 802000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 1693) (undo-tree-id379 . -2) 1695) nil (25139 24692 123083 802000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2264)) nil (25139 24692 123057 801000) 0 nil])
([nil nil ((2264 . 2265)) nil (25139 24692 123045 202000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2295)) nil (25139 24692 123032 502000) 0 nil])
([nil nil ((2295 . 2296)) nil (25139 24692 123020 2000) 0 nil])
([nil nil ((2299 . 2300)) nil (25139 24692 123004 401000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2300)) nil (25139 24692 122988 101000) 0 nil])
([nil nil ((2300 . 2301)) nil (25139 24692 122975 502000) 0 nil])
([nil nil ((2268 . 2270)) nil (25139 24692 122962 702000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2270)) nil (25139 24692 122949 702000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2344)) nil (25139 24692 122936 901000) 0 nil])
([nil nil ((2344 . 2345)) nil (25139 24692 122924 401000) 0 nil])
([nil nil ((2348 . 2349)) nil (25139 24692 122911 601000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2349)) nil (25139 24692 122898 702000) 0 nil])
([nil nil ((2349 . 2350)) nil (25139 24692 122886 102000) 0 nil])
([nil nil ((2351 . 2352)) nil (25139 24692 122873 302000) 0 nil])
([nil nil ((#("H" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2352)) nil (25139 24692 122860 301000) 0 nil])
([nil nil ((2352 . 2353)) nil (25139 24692 122847 702000) 0 nil])
([nil nil ((#("H" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2367)) nil (25139 24692 122834 801000) 0 nil])
([nil nil ((2367 . 2368)) nil (25139 24692 122822 102000) 0 nil])
([nil nil ((2373 . 2375)) nil (25139 24692 122809 402000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2375)) nil (25139 24692 122792 602000) 0 nil])
([nil nil ((#("  float get_deelta_time(float time);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (fontified t) 2 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 9 (ws-butler-chg chg fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg delete fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg delete fontified t face font-lock-function-name-face) 15 18 (fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg delete fontified t face font-lock-function-name-face) 21 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t c-type c-decl-arg-start) 24 29 (fontified t face font-lock-type-face) 29 30 (fontified t) 30 34 (fontified t face font-lock-variable-name-face) 34 36 (fontified t) 36 37 (fontified t)) . 2408) (undo-tree-id383 . -2) (undo-tree-id384 . -36) (undo-tree-id385 . -24) (undo-tree-id386 . -35) (undo-tree-id387 . -37) (t 25139 24692 129423 639000)) nil (25139 24696 388033 149000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . 2408) (undo-tree-id382 . -1)) nil (25139 24696 388012 848000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2411) (2412 . 2412) 2408) nil (25139 24696 387986 848000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -1937) (undo-tree-id388 . -1) (#("{" 0 1 (ws-butler-chg chg fontified t)) . -1938) (undo-tree-id389 . -1) 1939 (t 25139 24696 396090 144000)) nil (25139 24810 799665 284000) 0 nil])
([nil nil ((1937 . 1938)) nil (25139 24810 799638 84000) 0 nil])
([nil nil ((#("    hal->SetEnable(v);
" 0 3 (ws-butler-chg chg fontified t) 3 4 (ws-butler-chg chg fontified t) 4 5 (fontified t) 5 22 (ws-butler-chg chg fontified t) 22 23 (ws-butler-chg chg fontified t)) . 1939)) nil (25139 24810 799625 484000) 0 nil])
([nil nil ((#("  }
" 0 1 (ws-butler-chg delete fontified t) 1 4 (ws-butler-chg chg fontified t)) . 1939)) nil (25139 24810 799613 184000) 0 nil])
([nil nil ((#("  void set_enable(bool v);
" 0 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg delete fontified t face font-lock-function-name-face) 13 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 18 22 (ws-butler-chg chg fontified t face font-lock-type-face) 22 23 (ws-butler-chg chg fontified t) 23 24 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 24 25 (ws-butler-chg chg fontified t) 25 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg delete fontified t)) . 1912)) nil (25139 24810 799600 884000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1938 . 1939) (nil fontified nil 1938 . 1939) (nil fontified nil 1937 . 1938) (nil fontified nil 1936 . 1937) (nil fontified nil 1935 . 1936) (nil fontified nil 1934 . 1935) (nil fontified nil 1930 . 1934) (nil fontified nil 1929 . 1930) (nil fontified nil 1925 . 1929) (nil fontified nil 1924 . 1925) (nil fontified nil 1923 . 1924) (nil fontified nil 1922 . 1923) (nil fontified nil 1921 . 1922) (nil fontified nil 1920 . 1921) (nil fontified nil 1919 . 1920) (nil fontified nil 1918 . 1919) (nil fontified nil 1917 . 1918) (nil fontified nil 1914 . 1917) (nil fontified nil 1912 . 1914) (1912 . 1939)) nil (25139 24810 799587 584000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1938 . 1939) (nil fontified nil 1938 . 1939) (nil fontified nil 1937 . 1938) (nil fontified nil 1936 . 1937) (nil fontified nil 1935 . 1936) (nil fontified nil 1934 . 1935) (nil fontified nil 1930 . 1934) (nil fontified nil 1929 . 1930) (nil fontified nil 1925 . 1929) (nil fontified nil 1924 . 1925) (nil fontified nil 1923 . 1924) (nil fontified nil 1922 . 1923) (nil fontified nil 1921 . 1922) (nil fontified nil 1920 . 1921) (nil fontified nil 1919 . 1920) (nil fontified nil 1918 . 1919) (nil fontified nil 1917 . 1918) (nil fontified nil 1914 . 1917) (nil fontified nil 1912 . 1914) (1912 . 1939)) nil (25139 24810 799569 884000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1919)) nil (25139 24810 799542 884000) 0 nil])
([nil nil ((1919 . 1920)) nil (25139 24810 799530 684000) 0 nil])
([nil nil ((#("d" 0 1 (ws-butler-chg delete fontified t c-type c-decl-id-start face font-lock-type-face)) . 1914) (#("i" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 1914) (#("o" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 1914) (#("v" 0 1 (ws-butler-chg chg fontified t face font-lock-type-face)) . 1914)) nil (25139 24810 799517 584000) 0 nil])
([nil nil ((1914 . 1918)) nil (25139 24810 799504 484000) 0 nil])
([nil nil ((#("v" 0 1 (ws-butler-chg delete fontified t)) . 1930) (#(" " 0 1 (ws-butler-chg delete fontified t)) . 1930) (#("l" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 1930) (#("o" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 1930) (#("o" 0 1 (ws-butler-chg delete fontified t face font-lock-type-face)) . 1930) (#("b" 0 1 (ws-butler-chg chg fontified t face font-lock-type-face)) . 1930)) nil (25139 24810 799487 184000) 0 nil])
([nil nil ((#("V" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2208) (t 25139 24810 806085 789000)) nil (25139 24887 817807 61000) 0 nil])
([nil nil ((2208 . 2209)) nil (25139 24887 817794 461000) 0 nil])
([nil nil ((2214 . 2215)) nil (25139 24887 817782 161000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2215)) nil (25139 24887 817769 461000) 0 nil])
([nil nil ((2215 . 2216)) nil (25139 24887 817757 61000) 0 nil])
([nil nil ((2220 . 2221)) nil (25139 24887 817744 461000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 2221)) nil (25139 24887 817731 561000) 0 nil])
([nil nil ((2221 . 2222)) nil (25139 24887 817719 61000) 0 nil])
([nil nil ((#("  bool verify_timer_interval(uint64_t &interval);
" 0 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg delete fontified t face font-lock-function-name-face) 16 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t face font-lock-function-name-face) 21 22 (ws-butler-chg delete fontified t face font-lock-function-name-face) 22 28 (ws-butler-chg chg fontified t face font-lock-function-name-face) 28 29 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 29 37 (ws-butler-chg chg fontified t face font-lock-type-face) 37 39 (ws-butler-chg chg fontified t) 39 47 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 47 48 (ws-butler-chg chg fontified t) 48 49 (ws-butler-chg chg fontified t) 49 50 (ws-butler-chg chg fontified t)) . 2201) (undo-tree-id390 . -2) (undo-tree-id391 . -49) (undo-tree-id392 . -29) (undo-tree-id393 . -48)) nil (25139 24887 817705 461000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2010 . 2011) (nil fontified nil 2010 . 2011) (nil fontified nil 2009 . 2010) (nil fontified nil 2008 . 2009) (nil fontified nil 2000 . 2008) (nil fontified nil 1998 . 2000) (nil fontified nil 1990 . 1998) (nil fontified nil 1989 . 1990) (nil fontified nil 1983 . 1989) (nil fontified nil 1982 . 1983) (nil fontified nil 1981 . 1982) (nil fontified nil 1980 . 1981) (nil fontified nil 1977 . 1980) (nil fontified nil 1976 . 1977) (nil fontified nil 1975 . 1976) (nil fontified nil 1974 . 1975) (nil fontified nil 1970 . 1974) (nil fontified nil 1969 . 1970) (nil fontified nil 1968 . 1969) (nil fontified nil 1967 . 1968) (nil fontified nil 1966 . 1967) (nil fontified nil 1963 . 1966) (nil fontified nil 1961 . 1963) (1961 . 2011)) nil (25139 24887 817671 361000) 0 nil])
([nil nil ((1960 . 1962) (t 25139 24887 826082 866000)) nil (25139 24963 385684 113000) 0 nil])
([nil nil ((1962 . 1975)) nil (25139 24963 385671 213000) 0 nil])
([nil nil ((#("c" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1972) (undo-tree-id398 . -1) (#("i" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1973) (undo-tree-id399 . -1) (#("n" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1974) (undo-tree-id400 . -1) 1975) nil (25139 24963 385657 413000) 0 nil])
([nil nil ((1972 . 1981)) nil (25139 24963 385639 313000) 0 nil])
([nil nil ((1981 . 1983)) nil (25139 24963 385626 413000) 0 nil])
([nil nil ((1983 . 1984)) nil (25139 24963 385613 613000) 0 nil])
([nil nil ((1984 . 1987)) nil (25139 24963 385601 213000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 1985) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) 1987) nil (25139 24963 385586 13000) 0 nil])
([nil nil ((#("  void update_agent();movingToTarget();
" 0 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg chg fontified t face font-lock-function-name-face) 16 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg fontified t) 21 22 (ws-butler-chg chg fontified t) 22 23 (ws-butler-chg chg fontified t) 23 24 (ws-butler-chg delete fontified t) 24 36 (ws-butler-chg chg fontified t) 36 39 (ws-butler-chg chg fontified t) 39 40 (ws-butler-chg chg fontified t)) . 2073) (t 25139 24963 392746 657000)) nil (25139 24988 250593 471000) 0 nil])
([nil nil ((#("  void update_stepMotor();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg delete fontified t face font-lock-function-name-face) 16 23 (ws-butler-chg chg fontified t face font-lock-function-name-face) 23 26 (ws-butler-chg chg fontified t) 26 27 (ws-butler-chg chg fontified t)) . 2073)) nil (25139 24988 250580 371000) 0 nil])
([nil nil ((#("  void update_endpoint();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg delete fontified t face font-lock-function-name-face) 16 22 (ws-butler-chg chg fontified t face font-lock-function-name-face) 22 25 (ws-butler-chg chg fontified t) 25 26 (ws-butler-chg chg fontified t)) . 2073)) nil (25139 24988 250567 671000) 0 nil])
([nil nil ((#("  /** Convert units to steps and reversed*/
" 0 1 (ws-butler-chg delete c-in-sws t c-is-sws t fontified t) 1 2 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t) 2 3 (ws-butler-chg chg c-in-sws t c-is-sws t fontified t face font-lock-doc-face) 3 6 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 6 41 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 41 43 (ws-butler-chg chg c-in-sws t fontified t face font-lock-doc-face) 43 44 (ws-butler-chg chg fontified t c-in-sws t)) . 2073)) nil (25139 24988 250554 871000) 0 nil])
([nil nil ((#("  int UnitsToSteps(float units);
" 0 1 (ws-butler-chg delete c-is-sws t c-in-sws t fontified t) 1 2 (ws-butler-chg chg c-is-sws t c-in-sws t fontified t) 2 3 (ws-butler-chg chg c-is-sws t fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t) 6 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 19 24 (ws-butler-chg chg fontified t face font-lock-type-face) 24 25 (ws-butler-chg chg fontified t) 25 30 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 30 33 (ws-butler-chg chg fontified t)) . 2073) (undo-tree-id405 . -2) (undo-tree-id406 . -32) (undo-tree-id407 . -19) (undo-tree-id408 . -31)) nil (25139 24988 250541 571000) 0 nil])
([nil nil ((#("  float StepsToUnits(int steps);
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 6 (ws-butler-chg chg fontified t face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (ws-butler-chg chg fontified t) 8 19 (ws-butler-chg chg fontified t face font-lock-function-name-face) 19 20 (ws-butler-chg chg fontified t face font-lock-function-name-face) 20 21 (ws-butler-chg chg fontified t c-type c-decl-arg-start) 21 24 (ws-butler-chg chg fontified t face font-lock-type-face) 24 25 (ws-butler-chg chg fontified t) 25 30 (ws-butler-chg chg fontified t face font-lock-variable-name-face) 30 32 (ws-butler-chg chg fontified t) 32 33 (ws-butler-chg chg fontified t)) . 2073) (undo-tree-id401 . -2) (undo-tree-id402 . -32) (undo-tree-id403 . -21) (undo-tree-id404 . -31)) nil (25139 24988 250508 71000) 0 nil])
([nil nil ((#("  bool get_enable();
" 0 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg delete fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg delete fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t) 18 19 (ws-butler-chg delete fontified t) 19 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg fontified t rear-nonsticky t)) . 1912) (t 25139 24988 259412 368000)) nil (25139 29540 632977 935000) 0 nil])
([nil nil ((nil fontified nil 1932 . 1933) (nil fontified nil 1931 . 1932) (nil fontified nil 1930 . 1931) (nil fontified nil 1929 . 1930) (nil fontified nil 1925 . 1929) (nil fontified nil 1924 . 1925) (nil fontified nil 1923 . 1924) (nil fontified nil 1922 . 1923) (nil fontified nil 1921 . 1922) (nil fontified nil 1920 . 1921) (nil fontified nil 1919 . 1920) (nil fontified nil 1918 . 1919) (nil fontified nil 1917 . 1918) (nil fontified nil 1916 . 1917) (nil fontified nil 1915 . 1916) (nil fontified nil 1914 . 1915) (nil fontified nil 1912 . 1914) (1912 . 1933)) nil (25139 29540 632964 735000) 0 nil])
([nil nil ((nil fontified nil 1980 . 1981) (nil fontified nil 1979 . 1980) (nil fontified nil 1978 . 1979) (nil fontified nil 1977 . 1978) (nil fontified nil 1973 . 1977) (nil fontified nil 1972 . 1973) (nil fontified nil 1971 . 1972) (nil fontified nil 1970 . 1971) (nil fontified nil 1969 . 1970) (nil fontified nil 1968 . 1969) (nil fontified nil 1967 . 1968) (nil fontified nil 1966 . 1967) (nil fontified nil 1965 . 1966) (nil fontified nil 1964 . 1965) (nil fontified nil 1963 . 1964) (nil fontified nil 1962 . 1963) (nil fontified nil 1960 . 1962) (1960 . 1981)) nil (25139 29540 632947 35000) 0 nil])
([nil nil ((#("e" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 1971) (#("l" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 1971) (#("b" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 1971) (#("a" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 1971) (#("n" 0 1 (ws-butler-chg delete fontified t face font-lock-function-name-face)) . 1971) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1971)) nil (25139 29540 632927 135000) 0 nil])
([nil nil ((1971 . 1978)) nil (25139 29540 632910 135000) 0 nil])
([nil nil ((#("  bool get_endstop();
" 0 2 (ws-butler-chg chg fontified t) 2 3 (ws-butler-chg chg fontified t face font-lock-type-face) 3 4 (ws-butler-chg chg fontified t face font-lock-type-face) 4 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t face font-lock-function-name-face) 8 9 (ws-butler-chg chg fontified t face font-lock-function-name-face) 9 10 (ws-butler-chg chg fontified t face font-lock-function-name-face) 10 11 (ws-butler-chg chg fontified t face font-lock-function-name-face) 11 12 (ws-butler-chg chg fontified t face font-lock-function-name-face) 12 13 (ws-butler-chg chg fontified t face font-lock-function-name-face) 13 14 (ws-butler-chg chg fontified t face font-lock-function-name-face) 14 15 (ws-butler-chg chg fontified t face font-lock-function-name-face) 15 16 (ws-butler-chg chg fontified t face font-lock-function-name-face) 16 17 (ws-butler-chg chg fontified t face font-lock-function-name-face) 17 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 19 (ws-butler-chg delete fontified t) 19 20 (ws-butler-chg chg fontified t) 20 21 (ws-butler-chg chg fontified t) 21 22 (ws-butler-chg chg rear-nonsticky t fontified t)) . 1960) (t 25139 29540 642572 617000)) nil (25139 29598 983644 182000) 0 nil])
([nil nil ((nil fontified nil 1981 . 1982) (nil fontified nil 1980 . 1981) (nil fontified nil 1979 . 1980) (nil fontified nil 1978 . 1979) (nil fontified nil 1977 . 1978) (nil fontified nil 1976 . 1977) (nil fontified nil 1975 . 1976) (nil fontified nil 1974 . 1975) (nil fontified nil 1973 . 1974) (nil fontified nil 1972 . 1973) (nil fontified nil 1971 . 1972) (nil fontified nil 1970 . 1971) (nil fontified nil 1969 . 1970) (nil fontified nil 1968 . 1969) (nil fontified nil 1967 . 1968) (nil fontified nil 1966 . 1967) (nil fontified nil 1965 . 1966) (nil fontified nil 1964 . 1965) (nil fontified nil 1963 . 1964) (nil fontified nil 1962 . 1963) (nil fontified nil 1960 . 1962) (1960 . 1982)) nil (25139 29598 983630 482000) 0 nil])
([nil nil ((#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1974) (undo-tree-id409 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1975) (undo-tree-id410 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1976) (undo-tree-id411 . -1) (#("p" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1977) (undo-tree-id412 . -1) 1978) nil (25139 29598 983611 82000) 0 nil])
([nil nil ((1974 . 1979)) nil (25139 29598 983576 582000) 0 nil])
([nil nil ((#("I" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1033) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) 1034 (t 25139 29598 992570 401000)) nil (25139 30282 267529 586000) 0 nil])
([nil nil ((1033 . 1034)) nil (25139 30282 267512 285000) 0 nil])
([nil nil ((#("M" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1064) (undo-tree-id424 . -1) 1065) nil (25139 30282 267499 385000) 0 nil])
([nil nil ((1064 . 1065)) nil (25139 30282 267484 186000) 0 nil])
([nil nil ((#("T" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1068) (undo-tree-id423 . -1) 1069) nil (25139 30282 267471 186000) 0 nil])
([nil nil ((1068 . 1070)) nil (25139 30282 267455 786000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1109) (undo-tree-id422 . -1) 1110) nil (25139 30282 267442 985000) 0 nil])
([nil nil ((1109 . 1110)) nil (25139 30282 267427 286000) 0 nil])
([nil nil ((#("O" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1124) (undo-tree-id421 . -1) 1125) nil (25139 30282 267414 486000) 0 nil])
([nil nil ((1124 . 1125)) nil (25139 30282 267398 186000) 0 nil])
([nil nil ((1126 . 1128)) nil (25139 30282 267385 986000) 0 nil])
([nil nil ((#("S" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . 1128)) nil (25139 30282 267373 485000) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t face font-lock-function-name-face)) . -1152) (undo-tree-id420 . -1) 1153) nil (25139 30282 267359 986000) 0 nil])
([nil nil ((#(" private:
" 0 1 (ws-butler-chg chg fontified t) 1 8 (ws-butler-chg chg fontified t face font-lock-keyword-face) 8 9 (ws-butler-chg chg fontified t c-type c-decl-end) 9 10 (ws-butler-chg chg fontified t)) . 1135) (undo-tree-id417 . -1) (undo-tree-id418 . -9) (undo-tree-id419 . -10)) nil (25139 30282 267144 286000) 0 nil])
([nil current ((#("  void pdateTarget();
" 0 1 (ws-butler-chg delete fontified t) 1 2 (ws-butler-chg chg fontified t) 2 5 (ws-butler-chg chg fontified t face font-lock-type-face) 5 6 (ws-butler-chg chg fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg delete fontified t face font-lock-function-name-face) 8 18 (ws-butler-chg chg fontified t face font-lock-function-name-face) 18 21 (ws-butler-chg chg fontified t) 21 22 (ws-butler-chg chg fontified t)) . 1135) (undo-tree-id413 . -7) (undo-tree-id414 . -2) (undo-tree-id415 . -21) (undo-tree-id416 . -22)) nil (25139 30282 267124 585000) 0 nil])
nil
